swagger: '2.0'
info:
  title: HTTP API Console
  name: ''
  description: ''
paths:
  /cosmos.auth.v1beta1.Msg/UpdateParams:
    post:
      summary: >-
        UpdateParams defines a (governance) operation for updating the x/auth
        module

        parameters. The authority defaults to the x/gov module account.
      description: 'Since: cosmos-sdk 0.47'
      operationId: CosmosAuthV1Beta1Msg_UpdateParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgUpdateParamsResponse defines the response structure for
              executing a

              MsgUpdateParams message.


              Since: cosmos-sdk 0.47
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: |-
            MsgUpdateParams is the Msg/UpdateParams request type.

            Since: cosmos-sdk 0.47
          in: body
          required: true
          schema:
            type: object
            properties:
              authority:
                type: string
                description: >-
                  authority is the address that controls the module (defaults to
                  x/gov unless overwritten).
              params:
                description: |-
                  params defines the x/auth parameters to update.

                  NOTE: All parameters must be supplied.
                type: object
                properties:
                  max_memo_characters:
                    type: string
                    format: uint64
                  tx_sig_limit:
                    type: string
                    format: uint64
                  tx_size_cost_per_byte:
                    type: string
                    format: uint64
                  sig_verify_cost_ed25519:
                    type: string
                    format: uint64
                  sig_verify_cost_secp256k1:
                    type: string
                    format: uint64
            description: |-
              MsgUpdateParams is the Msg/UpdateParams request type.

              Since: cosmos-sdk 0.47
      tags:
        - Msg
  /cosmos.authz.v1beta1.Msg/Exec:
    post:
      summary: |-
        Exec attempts to execute the provided messages using
        authorizations granted to the grantee. Each message should have only
        one signer corresponding to the granter of the authorization.
      operationId: CosmosAuthzV1Beta1Msg_Exec
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              results:
                type: array
                items:
                  type: string
                  format: byte
            description: MsgExecResponse defines the Msg/MsgExecResponse response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: |-
            MsgExec attempts to execute the provided messages using
            authorizations granted to the grantee. Each message should have only
            one signer corresponding to the granter of the authorization.
          in: body
          required: true
          schema:
            type: object
            properties:
              grantee:
                type: string
              msgs:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                description: >-
                  Execute Msg.

                  The x/authz will try to find a grant matching (msg.signers[0],
                  grantee, MsgTypeURL(msg))

                  triple and validate it.
            description: >-
              MsgExec attempts to execute the provided messages using

              authorizations granted to the grantee. Each message should have
              only

              one signer corresponding to the granter of the authorization.
      tags:
        - Msg
  /cosmos.authz.v1beta1.Msg/Grant:
    post:
      summary: |-
        Grant grants the provided authorization to the grantee on the granter's
        account with the provided expiration time. If there is already a grant
        for the given (granter, grantee, Authorization) triple, then the grant
        will be overwritten.
      operationId: CosmosAuthzV1Beta1Msg_Grant
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: MsgGrantResponse defines the Msg/MsgGrant response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgGrant is a request type for Grant method. It declares
            authorization to the grantee

            on behalf of the granter with the provided expiration time.
          in: body
          required: true
          schema:
            type: object
            properties:
              granter:
                type: string
              grantee:
                type: string
              grant:
                type: object
                properties:
                  authorization:
                    type: object
                    properties:
                      '@type':
                        type: string
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com. As of May 2023, there are no
                          widely used type server

                          implementations and no plans to implement one.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                    additionalProperties: {}
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }
                          // or ...
                          if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                            foo = any.unpack(Foo.getDefaultInstance());
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".


                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                  expiration:
                    type: string
                    format: date-time
                    title: >-
                      time when the grant will expire and will be pruned. If
                      null, then the grant

                      doesn't have a time expiration (other conditions  in
                      `authorization`

                      may apply to invalidate the grant)
                description: |-
                  Grant gives permissions to execute
                  the provide method with expiration time.
            description: >-
              MsgGrant is a request type for Grant method. It declares
              authorization to the grantee

              on behalf of the granter with the provided expiration time.
      tags:
        - Msg
  /cosmos.authz.v1beta1.Msg/Revoke:
    post:
      summary: >-
        Revoke revokes any authorization corresponding to the provided method
        name on the

        granter's account that has been granted to the grantee.
      operationId: CosmosAuthzV1Beta1Msg_Revoke
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: MsgRevokeResponse defines the Msg/MsgRevokeResponse response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgRevoke revokes any authorization with the provided sdk.Msg type
            on the

            granter's account with that has been granted to the grantee.
          in: body
          required: true
          schema:
            type: object
            properties:
              granter:
                type: string
              grantee:
                type: string
              msg_type_url:
                type: string
            description: >-
              MsgRevoke revokes any authorization with the provided sdk.Msg type
              on the

              granter's account with that has been granted to the grantee.
      tags:
        - Msg
  /cosmos.bank.v1beta1.Msg/MultiSend:
    post:
      summary: >-
        MultiSend defines a method for sending coins from some accounts to other
        accounts.
      operationId: CosmosBankV1Beta1Msg_MultiSend
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: MsgMultiSendResponse defines the Msg/MultiSend response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: body
          description: >-
            MsgMultiSend represents an arbitrary multi-in, multi-out send
            message.
          in: body
          required: true
          schema:
            type: object
            properties:
              inputs:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                    coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                  description: Input models transaction input.
                description: >-
                  Inputs, despite being `repeated`, only allows one sender
                  input. This is

                  checked in MsgMultiSend's ValidateBasic.
              outputs:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                    coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                  description: Output models transaction outputs.
            description: >-
              MsgMultiSend represents an arbitrary multi-in, multi-out send
              message.
      tags:
        - Msg
  /cosmos.bank.v1beta1.Msg/Send:
    post:
      summary: >-
        Send defines a method for sending coins from one account to another
        account.
      operationId: CosmosBankV1Beta1Msg_Send
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: MsgSendResponse defines the Msg/Send response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: body
          description: >-
            MsgSend represents a message to send coins from one account to
            another.
          in: body
          required: true
          schema:
            type: object
            properties:
              from_address:
                type: string
              to_address:
                type: string
              amount:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
            description: >-
              MsgSend represents a message to send coins from one account to
              another.
      tags:
        - Msg
  /cosmos.bank.v1beta1.Msg/SetSendEnabled:
    post:
      summary: >-
        SetSendEnabled is a governance operation for setting the SendEnabled
        flag

        on any number of Denoms. Only the entries to add or update should be

        included. Entries that already exist in the store, but that aren't

        included in this message, will be left unchanged.
      description: 'Since: cosmos-sdk 0.47'
      operationId: CosmosBankV1Beta1Msg_SetSendEnabled
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgSetSendEnabledResponse defines the Msg/SetSendEnabled response
              type.


              Since: cosmos-sdk 0.47
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: body
          description: |-
            MsgSetSendEnabled is the Msg/SetSendEnabled request type.

            Only entries to add/update/delete need to be included.
            Existing SendEnabled entries that are not included in this
            message are left unchanged.

            Since: cosmos-sdk 0.47
          in: body
          required: true
          schema:
            type: object
            properties:
              authority:
                type: string
                description: authority is the address that controls the module.
              send_enabled:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    enabled:
                      type: boolean
                  description: >-
                    SendEnabled maps coin denom to a send_enabled status
                    (whether a denom is

                    sendable).
                description: send_enabled is the list of entries to add or update.
              use_default_for:
                type: array
                items:
                  type: string
                description: >-
                  use_default_for is a list of denoms that should use the
                  params.default_send_enabled value.

                  Denoms listed here will have their SendEnabled entries
                  deleted.

                  If a denom is included that doesn't have a SendEnabled entry,

                  it will be ignored.
            description: |-
              MsgSetSendEnabled is the Msg/SetSendEnabled request type.

              Only entries to add/update/delete need to be included.
              Existing SendEnabled entries that are not included in this
              message are left unchanged.

              Since: cosmos-sdk 0.47
      tags:
        - Msg
  /cosmos.bank.v1beta1.Msg/UpdateParams:
    post:
      summary: >-
        UpdateParams defines a governance operation for updating the x/bank
        module parameters.

        The authority is defined in the keeper.
      description: 'Since: cosmos-sdk 0.47'
      operationId: CosmosBankV1Beta1Msg_UpdateParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgUpdateParamsResponse defines the response structure for
              executing a

              MsgUpdateParams message.


              Since: cosmos-sdk 0.47
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: body
          description: |-
            MsgUpdateParams is the Msg/UpdateParams request type.

            Since: cosmos-sdk 0.47
          in: body
          required: true
          schema:
            type: object
            properties:
              authority:
                type: string
                description: >-
                  authority is the address that controls the module (defaults to
                  x/gov unless overwritten).
              params:
                description: |-
                  params defines the x/bank parameters to update.

                  NOTE: All parameters must be supplied.
                type: object
                properties:
                  send_enabled:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        enabled:
                          type: boolean
                      description: >-
                        SendEnabled maps coin denom to a send_enabled status
                        (whether a denom is

                        sendable).
                    description: >-
                      Deprecated: Use of SendEnabled in params is deprecated.

                      For genesis, use the newly added send_enabled field in the
                      genesis object.

                      Storage, lookup, and manipulation of this information is
                      now in the keeper.


                      As of cosmos-sdk 0.47, this only exists for backwards
                      compatibility of genesis files.
                  default_send_enabled:
                    type: boolean
            description: |-
              MsgUpdateParams is the Msg/UpdateParams request type.

              Since: cosmos-sdk 0.47
      tags:
        - Msg
  /cosmos/base/node/v1beta1/config:
    get:
      summary: Config queries for the operator configuration.
      operationId: CosmosBaseNodeV1Beta1Service_Config
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              minimum_gas_price:
                type: string
              pruning_keep_recent:
                type: string
              pruning_interval:
                type: string
              halt_height:
                type: string
                format: uint64
            description: >-
              ConfigResponse defines the response structure for the Config gRPC
              query.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      tags:
        - Service
  /cosmos/base/node/v1beta1/status:
    get:
      summary: Status queries for the node status.
      operationId: CosmosBaseNodeV1Beta1Service_Status
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              earliest_store_height:
                type: string
                format: uint64
                title: earliest block height available in the store
              height:
                type: string
                format: uint64
                title: current block height
              timestamp:
                type: string
                format: date-time
                title: block height timestamp
              app_hash:
                type: string
                format: byte
                title: app hash of the current block
              validator_hash:
                type: string
                format: byte
                title: validator hash provided by the consensus header
            description: >-
              StateResponse defines the response structure for the status of a
              node.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      tags:
        - Service
  /cosmos.consensus.v1.Msg/UpdateParams:
    post:
      summary: >-
        UpdateParams defines a governance operation for updating the x/consensus
        module parameters.

        The authority is defined in the keeper.
      description: 'Since: cosmos-sdk 0.47'
      operationId: CosmosConsensusV1Msg_UpdateParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgUpdateParamsResponse defines the response structure for
              executing a

              MsgUpdateParams message.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: body
          description: MsgUpdateParams is the Msg/UpdateParams request type.
          in: body
          required: true
          schema:
            type: object
            properties:
              authority:
                type: string
                description: >-
                  authority is the address that controls the module (defaults to
                  x/gov unless overwritten).
              block:
                description: >-
                  params defines the x/consensus parameters to update.

                  VersionsParams is not included in this Msg because it is
                  tracked

                  separarately in x/upgrade.


                  NOTE: All parameters must be supplied.
                type: object
                properties:
                  max_bytes:
                    type: string
                    format: int64
                    title: |-
                      Max block size, in bytes.
                      Note: must be greater than 0
                  max_gas:
                    type: string
                    format: int64
                    title: |-
                      Max gas per block.
                      Note: must be greater or equal to -1
              evidence:
                type: object
                properties:
                  max_age_num_blocks:
                    type: string
                    format: int64
                    description: >-
                      Max age of evidence, in blocks.


                      The basic formula for calculating this is: MaxAgeDuration
                      / {average block

                      time}.
                  max_age_duration:
                    type: string
                    description: >-
                      Max age of evidence, in time.


                      It should correspond with an app's "unbonding period" or
                      other similar

                      mechanism for handling [Nothing-At-Stake

                      attacks](https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed).
                  max_bytes:
                    type: string
                    format: int64
                    title: >-
                      This sets the maximum size of total evidence in bytes that
                      can be committed in a single block.

                      and should fall comfortably under the max block bytes.

                      Default is 1048576 or 1MB
                description: >-
                  EvidenceParams determine how we handle evidence of
                  malfeasance.
              validator:
                type: object
                properties:
                  pub_key_types:
                    type: array
                    items:
                      type: string
                description: >-
                  ValidatorParams restrict the public key types validators can
                  use.

                  NOTE: uses ABCI pubkey naming, not Amino names.
              abci:
                title: 'Since: cosmos-sdk 0.50'
                type: object
                properties:
                  vote_extensions_enable_height:
                    type: string
                    format: int64
                    description: >-
                      vote_extensions_enable_height configures the first height
                      during which

                      vote extensions will be enabled. During this specified
                      height, and for all

                      subsequent heights, precommit messages that do not contain
                      valid extension data

                      will be considered invalid. Prior to this height, vote
                      extensions will not

                      be used or accepted by validators on the network.


                      Once enabled, vote extensions will be created by the
                      application in ExtendVote,

                      passed to the application for validation in
                      VerifyVoteExtension and given

                      to the application to use when proposing a block during
                      PrepareProposal.
                description: >-
                  ABCIParams configure functionality specific to the Application
                  Blockchain Interface.
            description: MsgUpdateParams is the Msg/UpdateParams request type.
      tags:
        - Msg
  /cosmos.crisis.v1beta1.Msg/UpdateParams:
    post:
      summary: >-
        UpdateParams defines a governance operation for updating the x/crisis
        module

        parameters. The authority is defined in the keeper.
      description: 'Since: cosmos-sdk 0.47'
      operationId: CosmosCrisisV1Beta1Msg_UpdateParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgUpdateParamsResponse defines the response structure for
              executing a

              MsgUpdateParams message.


              Since: cosmos-sdk 0.47
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: body
          description: |-
            MsgUpdateParams is the Msg/UpdateParams request type.

            Since: cosmos-sdk 0.47
          in: body
          required: true
          schema:
            type: object
            properties:
              authority:
                type: string
                description: >-
                  authority is the address that controls the module (defaults to
                  x/gov unless overwritten).
              constant_fee:
                description: constant_fee defines the x/crisis parameter.
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
            description: |-
              MsgUpdateParams is the Msg/UpdateParams request type.

              Since: cosmos-sdk 0.47
      tags:
        - Msg
  /cosmos.crisis.v1beta1.Msg/VerifyInvariant:
    post:
      summary: VerifyInvariant defines a method to verify a particular invariant.
      operationId: CosmosCrisisV1Beta1Msg_VerifyInvariant
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgVerifyInvariantResponse defines the Msg/VerifyInvariant
              response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: body
          description: >-
            MsgVerifyInvariant represents a message to verify a particular
            invariance.
          in: body
          required: true
          schema:
            type: object
            properties:
              sender:
                type: string
                description: >-
                  sender is the account address of private key to send coins to
                  fee collector account.
              invariant_module_name:
                type: string
                description: name of the invariant module.
              invariant_route:
                type: string
                description: invariant_route is the msg's invariant route.
            description: >-
              MsgVerifyInvariant represents a message to verify a particular
              invariance.
      tags:
        - Msg
  /cosmos.evidence.v1beta1.Msg/SubmitEvidence:
    post:
      summary: >-
        SubmitEvidence submits an arbitrary Evidence of misbehavior such as
        equivocation or

        counterfactual signing.
      operationId: CosmosEvidenceV1Beta1Msg_SubmitEvidence
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              hash:
                type: string
                format: byte
                description: hash defines the hash of the evidence.
            description: >-
              MsgSubmitEvidenceResponse defines the Msg/SubmitEvidence response
              type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgSubmitEvidence represents a message that supports submitting
            arbitrary

            Evidence of misbehavior such as equivocation or counterfactual
            signing.
          in: body
          required: true
          schema:
            type: object
            properties:
              submitter:
                type: string
                description: submitter is the signer account address of evidence.
              evidence:
                description: evidence defines the evidence of misbehavior.
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com. As of May 2023, there are no widely
                      used type server

                      implementations and no plans to implement one.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
            description: >-
              MsgSubmitEvidence represents a message that supports submitting
              arbitrary

              Evidence of misbehavior such as equivocation or counterfactual
              signing.
      tags:
        - Msg
  /cosmos.feegrant.v1beta1.Msg/GrantAllowance:
    post:
      summary: |-
        GrantAllowance grants fee allowance to the grantee on the granter's
        account with the provided expiration time.
      operationId: CosmosFeegrantV1Beta1Msg_GrantAllowance
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgGrantAllowanceResponse defines the Msg/GrantAllowanceResponse
              response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgGrantAllowance adds permission for Grantee to spend up to
            Allowance

            of fees from the account of Granter.
          in: body
          required: true
          schema:
            type: object
            properties:
              granter:
                type: string
                description: >-
                  granter is the address of the user granting an allowance of
                  their funds.
              grantee:
                type: string
                description: >-
                  grantee is the address of the user being granted an allowance
                  of another user's funds.
              allowance:
                description: >-
                  allowance can be any of basic, periodic, allowed fee
                  allowance.
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com. As of May 2023, there are no widely
                      used type server

                      implementations and no plans to implement one.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
            description: >-
              MsgGrantAllowance adds permission for Grantee to spend up to
              Allowance

              of fees from the account of Granter.
      tags:
        - Msg
  /cosmos.feegrant.v1beta1.Msg/PruneAllowances:
    post:
      summary: >-
        PruneAllowances prunes expired fee allowances, currently up to 75 at a
        time.
      description: Since cosmos-sdk 0.50
      operationId: CosmosFeegrantV1Beta1Msg_PruneAllowances
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgPruneAllowancesResponse defines the Msg/PruneAllowancesResponse
              response type.


              Since cosmos-sdk 0.50
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: |-
            MsgPruneAllowances prunes expired fee allowances.

            Since cosmos-sdk 0.50
          in: body
          required: true
          schema:
            type: object
            properties:
              pruner:
                type: string
                description: pruner is the address of the user pruning expired allowances.
            description: |-
              MsgPruneAllowances prunes expired fee allowances.

              Since cosmos-sdk 0.50
      tags:
        - Msg
  /cosmos.feegrant.v1beta1.Msg/RevokeAllowance:
    post:
      summary: |-
        RevokeAllowance revokes any fee allowance of granter's account that
        has been granted to the grantee.
      operationId: CosmosFeegrantV1Beta1Msg_RevokeAllowance
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgRevokeAllowanceResponse defines the Msg/RevokeAllowanceResponse
              response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgRevokeAllowance removes any existing Allowance from Granter to
            Grantee.
          in: body
          required: true
          schema:
            type: object
            properties:
              granter:
                type: string
                description: >-
                  granter is the address of the user granting an allowance of
                  their funds.
              grantee:
                type: string
                description: >-
                  grantee is the address of the user being granted an allowance
                  of another user's funds.
            description: >-
              MsgRevokeAllowance removes any existing Allowance from Granter to
              Grantee.
      tags:
        - Msg
  /cosmos.mint.v1beta1.Msg/UpdateParams:
    post:
      summary: >-
        UpdateParams defines a governance operation for updating the x/mint
        module

        parameters. The authority is defaults to the x/gov module account.
      description: 'Since: cosmos-sdk 0.47'
      operationId: CosmosMintV1Beta1Msg_UpdateParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgUpdateParamsResponse defines the response structure for
              executing a

              MsgUpdateParams message.


              Since: cosmos-sdk 0.47
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: body
          description: |-
            MsgUpdateParams is the Msg/UpdateParams request type.

            Since: cosmos-sdk 0.47
          in: body
          required: true
          schema:
            type: object
            properties:
              authority:
                type: string
                description: >-
                  authority is the address that controls the module (defaults to
                  x/gov unless overwritten).
              params:
                description: |-
                  params defines the x/mint parameters to update.

                  NOTE: All parameters must be supplied.
                type: object
                properties:
                  mint_denom:
                    type: string
                    title: type of coin to mint
                  inflation_rate_change:
                    type: string
                    title: maximum annual change in inflation rate
                  inflation_max:
                    type: string
                    title: maximum inflation rate
                  inflation_min:
                    type: string
                    title: minimum inflation rate
                  goal_bonded:
                    type: string
                    title: goal of percent bonded atoms
                  blocks_per_year:
                    type: string
                    format: uint64
                    title: expected blocks per year
            description: |-
              MsgUpdateParams is the Msg/UpdateParams request type.

              Since: cosmos-sdk 0.47
      tags:
        - Msg
  /cosmos.nft.v1beta1.Msg/Send:
    post:
      summary: Send defines a method to send a nft from one account to another account.
      operationId: CosmosNftV1Beta1Msg_Send
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: MsgSendResponse defines the Msg/Send response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: body
          description: >-
            MsgSend represents a message to send a nft from one account to
            another account.
          in: body
          required: true
          schema:
            type: object
            properties:
              class_id:
                type: string
                title: >-
                  class_id defines the unique identifier of the nft
                  classification, similar to the contract address of ERC721
              id:
                type: string
                title: id defines the unique identification of nft
              sender:
                type: string
                title: sender is the address of the owner of nft
              receiver:
                type: string
                title: receiver is the receiver address of nft
            description: >-
              MsgSend represents a message to send a nft from one account to
              another account.
      tags:
        - Msg
  /cosmos/params/v1beta1/params:
    get:
      summary: |-
        Params queries a specific parameter of a module, given its subspace and
        key.
      operationId: CosmosParamsV1Beta1Query_Params
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              param:
                description: param defines the queried parameter.
                type: object
                properties:
                  subspace:
                    type: string
                  key:
                    type: string
                  value:
                    type: string
            description: >-
              QueryParamsResponse is response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: subspace
          description: subspace defines the module to query the parameter for.
          in: query
          required: false
          type: string
        - name: key
          description: key defines the key of the parameter in the subspace.
          in: query
          required: false
          type: string
      tags:
        - Query
  /cosmos/params/v1beta1/subspaces:
    get:
      summary: >-
        Subspaces queries for all registered subspaces and all keys for a
        subspace.
      description: 'Since: cosmos-sdk 0.46'
      operationId: CosmosParamsV1Beta1Query_Subspaces
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              subspaces:
                type: array
                items:
                  type: object
                  properties:
                    subspace:
                      type: string
                    keys:
                      type: array
                      items:
                        type: string
                  description: >-
                    Subspace defines a parameter subspace name and all the keys
                    that exist for

                    the subspace.


                    Since: cosmos-sdk 0.46
            description: >-
              QuerySubspacesResponse defines the response types for querying for
              all

              registered subspaces and all keys for a subspace.


              Since: cosmos-sdk 0.46
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      tags:
        - Query
  /cosmos.slashing.v1beta1.Msg/Unjail:
    post:
      summary: >-
        Unjail defines a method for unjailing a jailed validator, thus returning

        them into the bonded validator set, so they can begin receiving
        provisions

        and rewards again.
      operationId: CosmosSlashingV1Beta1Msg_Unjail
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            title: MsgUnjailResponse defines the Msg/Unjail response type
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              validator_addr:
                type: string
            title: MsgUnjail defines the Msg/Unjail request type
      tags:
        - Msg
  /cosmos.slashing.v1beta1.Msg/UpdateParams:
    post:
      summary: >-
        UpdateParams defines a governance operation for updating the x/slashing
        module

        parameters. The authority defaults to the x/gov module account.
      description: 'Since: cosmos-sdk 0.47'
      operationId: CosmosSlashingV1Beta1Msg_UpdateParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgUpdateParamsResponse defines the response structure for
              executing a

              MsgUpdateParams message.


              Since: cosmos-sdk 0.47
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: body
          description: |-
            MsgUpdateParams is the Msg/UpdateParams request type.

            Since: cosmos-sdk 0.47
          in: body
          required: true
          schema:
            type: object
            properties:
              authority:
                type: string
                description: >-
                  authority is the address that controls the module (defaults to
                  x/gov unless overwritten).
              params:
                description: |-
                  params defines the x/slashing parameters to update.

                  NOTE: All parameters must be supplied.
                type: object
                properties:
                  signed_blocks_window:
                    type: string
                    format: int64
                  min_signed_per_window:
                    type: string
                    format: byte
                  downtime_jail_duration:
                    type: string
                  slash_fraction_double_sign:
                    type: string
                    format: byte
                  slash_fraction_downtime:
                    type: string
                    format: byte
            description: |-
              MsgUpdateParams is the Msg/UpdateParams request type.

              Since: cosmos-sdk 0.47
      tags:
        - Msg
  /ibc.applications.fee.v1.Msg/PayPacketFee:
    post:
      summary: >-
        PayPacketFee defines a rpc handler method for MsgPayPacketFee

        PayPacketFee is an open callback that may be called by any module/user
        that wishes to escrow funds in order to

        incentivize the relaying of the packet at the next sequence

        NOTE: This method is intended to be used within a multi msg transaction,
        where the subsequent msg that follows

        initiates the lifecycle of the incentivized packet
      operationId: IbcApplicationsFeeV1Msg_PayPacketFee
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            title: >-
              MsgPayPacketFeeResponse defines the response type for the
              PayPacketFee rpc
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              fee:
                title: >-
                  fee encapsulates the recv, ack and timeout fees associated
                  with an IBC packet
                type: object
                properties:
                  recv_fee:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                    title: the packet receive fee
                  ack_fee:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                    title: the packet acknowledgement fee
                  timeout_fee:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                    title: the packet timeout fee
              source_port_id:
                type: string
                title: the source port unique identifier
              source_channel_id:
                type: string
                title: the source channel unique identifer
              signer:
                type: string
                title: account address to refund fee if necessary
              relayers:
                type: array
                items:
                  type: string
                title: optional list of relayers permitted to the receive packet fees
            title: >-
              MsgPayPacketFee defines the request type for the PayPacketFee rpc

              This Msg can be used to pay for a packet at the next sequence send
              & should be combined with the Msg that will be

              paid for
      tags:
        - Msg
  /ibc.applications.fee.v1.Msg/PayPacketFeeAsync:
    post:
      summary: >-
        PayPacketFeeAsync defines a rpc handler method for MsgPayPacketFeeAsync

        PayPacketFeeAsync is an open callback that may be called by any
        module/user that wishes to escrow funds in order to

        incentivize the relaying of a known packet (i.e. at a particular
        sequence)
      operationId: IbcApplicationsFeeV1Msg_PayPacketFeeAsync
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            title: >-
              MsgPayPacketFeeAsyncResponse defines the response type for the
              PayPacketFeeAsync rpc
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              packet_id:
                title: >-
                  unique packet identifier comprised of the channel ID, port ID
                  and sequence
                type: object
                properties:
                  port_id:
                    type: string
                    title: channel port identifier
                  channel_id:
                    type: string
                    title: channel unique identifier
                  sequence:
                    type: string
                    format: uint64
                    title: packet sequence
              packet_fee:
                title: the packet fee associated with a particular IBC packet
                type: object
                properties:
                  fee:
                    title: >-
                      fee encapsulates the recv, ack and timeout fees associated
                      with an IBC packet
                    type: object
                    properties:
                      recv_fee:
                        type: array
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements
                            the custom method

                            signatures required by gogoproto.
                        title: the packet receive fee
                      ack_fee:
                        type: array
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements
                            the custom method

                            signatures required by gogoproto.
                        title: the packet acknowledgement fee
                      timeout_fee:
                        type: array
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements
                            the custom method

                            signatures required by gogoproto.
                        title: the packet timeout fee
                  refund_address:
                    type: string
                    title: the refund address for unspent fees
                  relayers:
                    type: array
                    items:
                      type: string
                    title: optional list of relayers permitted to receive fees
            title: >-
              MsgPayPacketFeeAsync defines the request type for the
              PayPacketFeeAsync rpc

              This Msg can be used to pay for a packet at a specified sequence
              (instead of the next sequence send)
      tags:
        - Msg
  /ibc.applications.fee.v1.Msg/RegisterCounterpartyPayee:
    post:
      summary: >-
        RegisterCounterpartyPayee defines a rpc handler method for
        MsgRegisterCounterpartyPayee

        RegisterCounterpartyPayee is called by the relayer on each channelEnd
        and allows them to specify the counterparty

        payee address before relaying. This ensures they will be properly
        compensated for forward relaying since

        the destination chain must include the registered counterparty payee
        address in the acknowledgement. This function

        may be called more than once by a relayer, in which case, the latest
        counterparty payee address is always used.
      operationId: IbcApplicationsFeeV1Msg_RegisterCounterpartyPayee
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            title: >-
              MsgRegisterCounterpartyPayeeResponse defines the response type for
              the RegisterCounterpartyPayee rpc
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              port_id:
                type: string
                title: unique port identifier
              channel_id:
                type: string
                title: unique channel identifier
              relayer:
                type: string
                title: the relayer address
              counterparty_payee:
                type: string
                title: the counterparty payee address
            title: >-
              MsgRegisterCounterpartyPayee defines the request type for the
              RegisterCounterpartyPayee rpc
      tags:
        - Msg
  /ibc.applications.fee.v1.Msg/RegisterPayee:
    post:
      summary: >-
        RegisterPayee defines a rpc handler method for MsgRegisterPayee

        RegisterPayee is called by the relayer on each channelEnd and allows
        them to set an optional

        payee to which reverse and timeout relayer packet fees will be paid out.
        The payee should be registered on

        the source chain from which packets originate as this is where fee
        distribution takes place. This function may be

        called more than once by a relayer, in which case, the latest payee is
        always used.
      operationId: IbcApplicationsFeeV1Msg_RegisterPayee
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            title: >-
              MsgRegisterPayeeResponse defines the response type for the
              RegisterPayee rpc
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              port_id:
                type: string
                title: unique port identifier
              channel_id:
                type: string
                title: unique channel identifier
              relayer:
                type: string
                title: the relayer address
              payee:
                type: string
                title: the payee address
            title: >-
              MsgRegisterPayee defines the request type for the RegisterPayee
              rpc
      tags:
        - Msg
  /ibc.applications.interchain_accounts.controller.v1.Msg/RegisterInterchainAccount:
    post:
      summary: >-
        RegisterInterchainAccount defines a rpc handler for
        MsgRegisterInterchainAccount.
      operationId: >-
        IbcApplicationsInterchainAccountsControllerV1Msg_RegisterInterchainAccount
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              channel_id:
                type: string
              port_id:
                type: string
            title: >-
              MsgRegisterInterchainAccountResponse defines the response for
              Msg/RegisterAccount
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              owner:
                type: string
              connection_id:
                type: string
              version:
                type: string
              ordering:
                type: string
                enum:
                  - ORDER_NONE_UNSPECIFIED
                  - ORDER_UNORDERED
                  - ORDER_ORDERED
                default: ORDER_NONE_UNSPECIFIED
                description: |-
                  - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
                   - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                  which they were sent.
                   - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
                title: Order defines if a channel is ORDERED or UNORDERED
            title: >-
              MsgRegisterInterchainAccount defines the payload for
              Msg/RegisterAccount
      tags:
        - Msg
  /ibc.applications.interchain_accounts.controller.v1.Msg/SendTx:
    post:
      summary: SendTx defines a rpc handler for MsgSendTx.
      operationId: IbcApplicationsInterchainAccountsControllerV1Msg_SendTx
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              sequence:
                type: string
                format: uint64
            title: MsgSendTxResponse defines the response for MsgSendTx
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              owner:
                type: string
              connection_id:
                type: string
              packet_data:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - TYPE_UNSPECIFIED
                      - TYPE_EXECUTE_TX
                    default: TYPE_UNSPECIFIED
                    description: |-
                      - TYPE_UNSPECIFIED: Default zero value enumeration
                       - TYPE_EXECUTE_TX: Execute a transaction on an interchain accounts host chain
                    title: >-
                      Type defines a classification of message issued from a
                      controller chain to its associated interchain accounts

                      host
                  data:
                    type: string
                    format: byte
                  memo:
                    type: string
                description: >-
                  InterchainAccountPacketData is comprised of a raw transaction,
                  type of transaction and optional memo field.
              relative_timeout:
                type: string
                format: uint64
                description: >-
                  Relative timeout timestamp provided will be added to the
                  current block time during transaction execution.

                  The timeout timestamp must be non-zero.
            title: MsgSendTx defines the payload for Msg/SendTx
      tags:
        - Msg
  /ibc.applications.interchain_accounts.controller.v1.Msg/UpdateParams:
    post:
      summary: UpdateParams defines a rpc handler for MsgUpdateParams.
      operationId: IbcApplicationsInterchainAccountsControllerV1Msg_UpdateParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            title: MsgUpdateParamsResponse defines the response for Msg/UpdateParams
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              signer:
                type: string
                title: signer address
              params:
                description: >-
                  params defines the 27-interchain-accounts/controller
                  parameters to update.


                  NOTE: All parameters must be supplied.
                type: object
                properties:
                  controller_enabled:
                    type: boolean
                    description: >-
                      controller_enabled enables or disables the controller
                      submodule.
            title: MsgUpdateParams defines the payload for Msg/UpdateParams
      tags:
        - Msg
  /ibc.applications.interchain_accounts.host.v1.Msg/UpdateParams:
    post:
      summary: UpdateParams defines a rpc handler for MsgUpdateParams.
      operationId: IbcApplicationsInterchainAccountsHostV1Msg_UpdateParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            title: MsgUpdateParamsResponse defines the response for Msg/UpdateParams
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              signer:
                type: string
                title: signer address
              params:
                description: >-
                  params defines the 27-interchain-accounts/host parameters to
                  update.


                  NOTE: All parameters must be supplied.
                type: object
                properties:
                  host_enabled:
                    type: boolean
                    description: host_enabled enables or disables the host submodule.
                  allow_messages:
                    type: array
                    items:
                      type: string
                    description: >-
                      allow_messages defines a list of sdk message typeURLs
                      allowed to be executed on a host chain.
            title: MsgUpdateParams defines the payload for Msg/UpdateParams
      tags:
        - Msg
  /ibc.applications.transfer.v1.Msg/Transfer:
    post:
      summary: Transfer defines a rpc handler method for MsgTransfer.
      operationId: IbcApplicationsTransferV1Msg_Transfer
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              sequence:
                type: string
                format: uint64
                title: sequence number of the transfer packet sent
            description: MsgTransferResponse defines the Msg/Transfer response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              source_port:
                type: string
                title: the port on which the packet will be sent
              source_channel:
                type: string
                title: the channel by which the packet will be sent
              token:
                title: the tokens to be transferred
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
              sender:
                type: string
                title: the sender address
              receiver:
                type: string
                title: the recipient address on the destination chain
              timeout_height:
                description: |-
                  Timeout height relative to the current block height.
                  The timeout is disabled when set to 0.
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                title: >-
                  Height is a monotonically increasing data type

                  that can be compared against another Height for the purposes
                  of updating and

                  freezing clients
              timeout_timestamp:
                type: string
                format: uint64
                description: |-
                  Timeout timestamp in absolute nanoseconds since unix epoch.
                  The timeout is disabled when set to 0.
              memo:
                type: string
                title: optional memo
            title: >-
              MsgTransfer defines a msg to transfer fungible tokens (i.e Coins)
              between

              ICS20 enabled chains. See ICS Spec here:

              https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer#data-structures
      tags:
        - Msg
  /ibc.applications.transfer.v1.Msg/UpdateParams:
    post:
      summary: UpdateParams defines a rpc handler for MsgUpdateParams.
      operationId: IbcApplicationsTransferV1Msg_UpdateParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgUpdateParamsResponse defines the response structure for
              executing a

              MsgUpdateParams message.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: MsgUpdateParams is the Msg/UpdateParams request type.
          in: body
          required: true
          schema:
            type: object
            properties:
              signer:
                type: string
                title: signer address
              params:
                description: |-
                  params defines the transfer parameters to update.

                  NOTE: All parameters must be supplied.
                type: object
                properties:
                  send_enabled:
                    type: boolean
                    description: >-
                      send_enabled enables or disables all cross-chain token
                      transfers from this

                      chain.
                  receive_enabled:
                    type: boolean
                    description: >-
                      receive_enabled enables or disables all cross-chain token
                      transfers to this

                      chain.
            description: MsgUpdateParams is the Msg/UpdateParams request type.
      tags:
        - Msg
  /ibc.core.client.v1.Msg/CreateClient:
    post:
      summary: CreateClient defines a rpc handler method for MsgCreateClient.
      operationId: IbcCoreClientV1Msg_CreateClient
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgCreateClientResponse defines the Msg/CreateClient response
              type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              client_state:
                title: light client state
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com. As of May 2023, there are no widely
                      used type server

                      implementations and no plans to implement one.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }
                      // or ...
                      if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                        foo = any.unpack(Foo.getDefaultInstance());
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".


                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
              consensus_state:
                description: >-
                  consensus state associated with the client that corresponds to
                  a given

                  height.
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com. As of May 2023, there are no widely
                      used type server

                      implementations and no plans to implement one.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
              signer:
                type: string
                title: signer address
            title: MsgCreateClient defines a message to create an IBC client
      tags:
        - Msg
  /ibc.core.client.v1.Msg/IBCSoftwareUpgrade:
    post:
      summary: >-
        IBCSoftwareUpgrade defines a rpc handler method for
        MsgIBCSoftwareUpgrade.
      operationId: IbcCoreClientV1Msg_IBCSoftwareUpgrade
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgIBCSoftwareUpgradeResponse defines the Msg/IBCSoftwareUpgrade
              response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              plan:
                type: object
                properties:
                  name:
                    type: string
                    description: >-
                      Sets the name for the upgrade. This name will be used by
                      the upgraded

                      version of the software to apply any special "on-upgrade"
                      commands during

                      the first BeginBlock method after the upgrade is applied.
                      It is also used

                      to detect whether a software version can handle a given
                      upgrade. If no

                      upgrade handler with this name has been set in the
                      software, it will be

                      assumed that the software is out-of-date when the upgrade
                      Time or Height is

                      reached and the software will exit.
                  time:
                    type: string
                    format: date-time
                    description: >-
                      Deprecated: Time based upgrades have been deprecated. Time
                      based upgrade logic

                      has been removed from the SDK.

                      If this field is not empty, an error will be thrown.
                  height:
                    type: string
                    format: int64
                    description: The height at which the upgrade must be performed.
                  info:
                    type: string
                    title: >-
                      Any application specific upgrade info to be included
                      on-chain

                      such as a git commit that validators could automatically
                      upgrade to
                  upgraded_client_state:
                    description: >-
                      Deprecated: UpgradedClientState field has been deprecated.
                      IBC upgrade logic has been

                      moved to the IBC module in the sub module 02-client.

                      If this field is not empty, an error will be thrown.
                    type: object
                    properties:
                      '@type':
                        type: string
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com. As of May 2023, there are no
                          widely used type server

                          implementations and no plans to implement one.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                    additionalProperties: {}
                description: >-
                  Plan specifies information about a planned upgrade and when it
                  should occur.
              upgraded_client_state:
                description: >-
                  An UpgradedClientState must be provided to perform an IBC
                  breaking upgrade.

                  This will make the chain commit to the correct upgraded (self)
                  client state

                  before the upgrade occurs, so that connecting chains can
                  verify that the

                  new upgraded client is valid by verifying a proof on the
                  previous version

                  of the chain. This will allow IBC connections to persist
                  smoothly across

                  planned chain upgrades. Correspondingly, the
                  UpgradedClientState field has been

                  deprecated in the Cosmos SDK to allow for this logic to exist
                  solely in

                  the 02-client module.
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com. As of May 2023, there are no widely
                      used type server

                      implementations and no plans to implement one.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
              signer:
                type: string
                title: signer address
            title: >-
              MsgIBCSoftwareUpgrade defines the message used to schedule an
              upgrade of an IBC client using a v1 governance proposal
      tags:
        - Msg
  /ibc.core.client.v1.Msg/RecoverClient:
    post:
      summary: RecoverClient defines a rpc handler method for MsgRecoverClient.
      operationId: IbcCoreClientV1Msg_RecoverClient
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgRecoverClientResponse defines the Msg/RecoverClient response
              type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgRecoverClient defines the message used to recover a frozen or
            expired client.
          in: body
          required: true
          schema:
            type: object
            properties:
              subject_client_id:
                type: string
                title: >-
                  the client identifier for the client to be updated if the
                  proposal passes
              substitute_client_id:
                type: string
                title: >-
                  the substitute client identifier for the client which will
                  replace the subject

                  client
              signer:
                type: string
                title: signer address
            description: >-
              MsgRecoverClient defines the message used to recover a frozen or
              expired client.
      tags:
        - Msg
  /ibc.core.client.v1.Msg/SubmitMisbehaviour:
    post:
      summary: >-
        SubmitMisbehaviour defines a rpc handler method for
        MsgSubmitMisbehaviour.
      operationId: IbcCoreClientV1Msg_SubmitMisbehaviour
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgSubmitMisbehaviourResponse defines the Msg/SubmitMisbehaviour
              response

              type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgSubmitMisbehaviour defines an sdk.Msg type that submits Evidence
            for

            light client misbehaviour.

            This message has been deprecated. Use MsgUpdateClient instead.
          in: body
          required: true
          schema:
            type: object
            properties:
              client_id:
                type: string
                title: client unique identifier
              misbehaviour:
                title: misbehaviour used for freezing the light client
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com. As of May 2023, there are no widely
                      used type server

                      implementations and no plans to implement one.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }
                      // or ...
                      if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                        foo = any.unpack(Foo.getDefaultInstance());
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".


                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
              signer:
                type: string
                title: signer address
            description: >-
              MsgSubmitMisbehaviour defines an sdk.Msg type that submits
              Evidence for

              light client misbehaviour.

              This message has been deprecated. Use MsgUpdateClient instead.
      tags:
        - Msg
  /ibc.core.client.v1.Msg/UpdateClient:
    post:
      summary: UpdateClient defines a rpc handler method for MsgUpdateClient.
      operationId: IbcCoreClientV1Msg_UpdateClient
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgUpdateClientResponse defines the Msg/UpdateClient response
              type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgUpdateClient defines an sdk.Msg to update a IBC client state
            using

            the given client message.
          in: body
          required: true
          schema:
            type: object
            properties:
              client_id:
                type: string
                title: client unique identifier
              client_message:
                title: client message to update the light client
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com. As of May 2023, there are no widely
                      used type server

                      implementations and no plans to implement one.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }
                      // or ...
                      if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                        foo = any.unpack(Foo.getDefaultInstance());
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".


                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
              signer:
                type: string
                title: signer address
            description: >-
              MsgUpdateClient defines an sdk.Msg to update a IBC client state
              using

              the given client message.
      tags:
        - Msg
  /ibc.core.client.v1.Msg/UpdateClientParams:
    post:
      summary: UpdateClientParams defines a rpc handler method for MsgUpdateParams.
      operationId: IbcCoreClientV1Msg_UpdateClientParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: MsgUpdateParamsResponse defines the MsgUpdateParams response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgUpdateParams defines the sdk.Msg type to update the client
            parameters.
          in: body
          required: true
          schema:
            type: object
            properties:
              signer:
                type: string
                title: signer address
              params:
                description: |-
                  params defines the client parameters to update.

                  NOTE: All parameters must be supplied.
                type: object
                properties:
                  allowed_clients:
                    type: array
                    items:
                      type: string
                    description: >-
                      allowed_clients defines the list of allowed client state
                      types which can be created

                      and interacted with. If a client type is removed from the
                      allowed clients list, usage

                      of this client will be disabled until it is added again to
                      the list.
            description: >-
              MsgUpdateParams defines the sdk.Msg type to update the client
              parameters.
      tags:
        - Msg
  /ibc.core.client.v1.Msg/UpgradeClient:
    post:
      summary: UpgradeClient defines a rpc handler method for MsgUpgradeClient.
      operationId: IbcCoreClientV1Msg_UpgradeClient
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgUpgradeClientResponse defines the Msg/UpgradeClient response
              type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              client_id:
                type: string
                title: client unique identifier
              client_state:
                title: upgraded client state
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com. As of May 2023, there are no widely
                      used type server

                      implementations and no plans to implement one.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }
                      // or ...
                      if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                        foo = any.unpack(Foo.getDefaultInstance());
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".


                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
              consensus_state:
                title: >-
                  upgraded consensus state, only contains enough information to
                  serve as a

                  basis of trust in update logic
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com. As of May 2023, there are no widely
                      used type server

                      implementations and no plans to implement one.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }
                      // or ...
                      if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                        foo = any.unpack(Foo.getDefaultInstance());
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".


                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
              proof_upgrade_client:
                type: string
                format: byte
                title: proof that old chain committed to new client
              proof_upgrade_consensus_state:
                type: string
                format: byte
                title: proof that old chain committed to new consensus state
              signer:
                type: string
                title: signer address
            title: >-
              MsgUpgradeClient defines an sdk.Msg to upgrade an IBC client to a
              new client

              state
      tags:
        - Msg
  /ibc.core.connection.v1.Msg/ConnectionOpenAck:
    post:
      summary: ConnectionOpenAck defines a rpc handler method for MsgConnectionOpenAck.
      operationId: IbcCoreConnectionV1Msg_ConnectionOpenAck
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgConnectionOpenAckResponse defines the Msg/ConnectionOpenAck
              response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: |-
            MsgConnectionOpenAck defines a msg sent by a Relayer to Chain A to
            acknowledge the change of connection state to TRYOPEN on Chain B.
          in: body
          required: true
          schema:
            type: object
            properties:
              connection_id:
                type: string
              counterparty_connection_id:
                type: string
              version:
                type: object
                properties:
                  identifier:
                    type: string
                    title: unique version identifier
                  features:
                    type: array
                    items:
                      type: string
                    title: list of features compatible with the specified identifier
                description: >-
                  Version defines the versioning scheme used to negotiate the
                  IBC verison in

                  the connection handshake.
              client_state:
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com. As of May 2023, there are no widely
                      used type server

                      implementations and no plans to implement one.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }
                      // or ...
                      if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                        foo = any.unpack(Foo.getDefaultInstance());
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".


                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
              proof_height:
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                title: >-
                  Height is a monotonically increasing data type

                  that can be compared against another Height for the purposes
                  of updating and

                  freezing clients
              proof_try:
                type: string
                format: byte
                title: >-
                  proof of the initialization the connection on Chain B:
                  `UNITIALIZED ->

                  TRYOPEN`
              proof_client:
                type: string
                format: byte
                title: proof of client state included in message
              proof_consensus:
                type: string
                format: byte
                title: proof of client consensus state
              consensus_height:
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                title: >-
                  Height is a monotonically increasing data type

                  that can be compared against another Height for the purposes
                  of updating and

                  freezing clients
              signer:
                type: string
              host_consensus_state_proof:
                type: string
                format: byte
                title: >-
                  optional proof data for host state machines that are unable to
                  introspect their own consensus state
            description: |-
              MsgConnectionOpenAck defines a msg sent by a Relayer to Chain A to
              acknowledge the change of connection state to TRYOPEN on Chain B.
      tags:
        - Msg
  /ibc.core.connection.v1.Msg/ConnectionOpenConfirm:
    post:
      summary: |-
        ConnectionOpenConfirm defines a rpc handler method for
        MsgConnectionOpenConfirm.
      operationId: IbcCoreConnectionV1Msg_ConnectionOpenConfirm
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgConnectionOpenConfirmResponse defines the
              Msg/ConnectionOpenConfirm

              response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgConnectionOpenConfirm defines a msg sent by a Relayer to Chain B
            to

            acknowledge the change of connection state to OPEN on Chain A.
          in: body
          required: true
          schema:
            type: object
            properties:
              connection_id:
                type: string
              proof_ack:
                type: string
                format: byte
                title: >-
                  proof for the change of the connection state on Chain A: `INIT
                  -> OPEN`
              proof_height:
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                title: >-
                  Height is a monotonically increasing data type

                  that can be compared against another Height for the purposes
                  of updating and

                  freezing clients
              signer:
                type: string
            description: >-
              MsgConnectionOpenConfirm defines a msg sent by a Relayer to Chain
              B to

              acknowledge the change of connection state to OPEN on Chain A.
      tags:
        - Msg
  /ibc.core.connection.v1.Msg/ConnectionOpenInit:
    post:
      summary: >-
        ConnectionOpenInit defines a rpc handler method for
        MsgConnectionOpenInit.
      operationId: IbcCoreConnectionV1Msg_ConnectionOpenInit
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgConnectionOpenInitResponse defines the Msg/ConnectionOpenInit
              response

              type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgConnectionOpenInit defines the msg sent by an account on Chain A
            to

            initialize a connection with Chain B.
          in: body
          required: true
          schema:
            type: object
            properties:
              client_id:
                type: string
              counterparty:
                type: object
                properties:
                  client_id:
                    type: string
                    description: >-
                      identifies the client on the counterparty chain associated
                      with a given

                      connection.
                  connection_id:
                    type: string
                    description: >-
                      identifies the connection end on the counterparty chain
                      associated with a

                      given connection.
                  prefix:
                    description: commitment merkle prefix of the counterparty chain.
                    type: object
                    properties:
                      key_prefix:
                        type: string
                        format: byte
                    title: >-
                      MerklePrefix is merkle path prefixed to the key.

                      The constructed key from the Path and the key will be
                      append(Path.KeyPath,

                      append(Path.KeyPrefix, key...))
                description: >-
                  Counterparty defines the counterparty chain associated with a
                  connection end.
              version:
                type: object
                properties:
                  identifier:
                    type: string
                    title: unique version identifier
                  features:
                    type: array
                    items:
                      type: string
                    title: list of features compatible with the specified identifier
                description: >-
                  Version defines the versioning scheme used to negotiate the
                  IBC verison in

                  the connection handshake.
              delay_period:
                type: string
                format: uint64
              signer:
                type: string
            description: >-
              MsgConnectionOpenInit defines the msg sent by an account on Chain
              A to

              initialize a connection with Chain B.
      tags:
        - Msg
  /ibc.core.connection.v1.Msg/ConnectionOpenTry:
    post:
      summary: ConnectionOpenTry defines a rpc handler method for MsgConnectionOpenTry.
      operationId: IbcCoreConnectionV1Msg_ConnectionOpenTry
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgConnectionOpenTryResponse defines the Msg/ConnectionOpenTry
              response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgConnectionOpenTry defines a msg sent by a Relayer to try to open
            a

            connection on Chain B.
          in: body
          required: true
          schema:
            type: object
            properties:
              client_id:
                type: string
              previous_connection_id:
                type: string
                description: >-
                  Deprecated: this field is unused. Crossing hellos are no
                  longer supported in core IBC.
              client_state:
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com. As of May 2023, there are no widely
                      used type server

                      implementations and no plans to implement one.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }
                      // or ...
                      if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                        foo = any.unpack(Foo.getDefaultInstance());
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".


                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
              counterparty:
                type: object
                properties:
                  client_id:
                    type: string
                    description: >-
                      identifies the client on the counterparty chain associated
                      with a given

                      connection.
                  connection_id:
                    type: string
                    description: >-
                      identifies the connection end on the counterparty chain
                      associated with a

                      given connection.
                  prefix:
                    description: commitment merkle prefix of the counterparty chain.
                    type: object
                    properties:
                      key_prefix:
                        type: string
                        format: byte
                    title: >-
                      MerklePrefix is merkle path prefixed to the key.

                      The constructed key from the Path and the key will be
                      append(Path.KeyPath,

                      append(Path.KeyPrefix, key...))
                description: >-
                  Counterparty defines the counterparty chain associated with a
                  connection end.
              delay_period:
                type: string
                format: uint64
              counterparty_versions:
                type: array
                items:
                  type: object
                  properties:
                    identifier:
                      type: string
                      title: unique version identifier
                    features:
                      type: array
                      items:
                        type: string
                      title: >-
                        list of features compatible with the specified
                        identifier
                  description: >-
                    Version defines the versioning scheme used to negotiate the
                    IBC verison in

                    the connection handshake.
              proof_height:
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                title: >-
                  Height is a monotonically increasing data type

                  that can be compared against another Height for the purposes
                  of updating and

                  freezing clients
              proof_init:
                type: string
                format: byte
                title: >-
                  proof of the initialization the connection on Chain A:
                  `UNITIALIZED ->

                  INIT`
              proof_client:
                type: string
                format: byte
                title: proof of client state included in message
              proof_consensus:
                type: string
                format: byte
                title: proof of client consensus state
              consensus_height:
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                title: >-
                  Height is a monotonically increasing data type

                  that can be compared against another Height for the purposes
                  of updating and

                  freezing clients
              signer:
                type: string
              host_consensus_state_proof:
                type: string
                format: byte
                title: >-
                  optional proof data for host state machines that are unable to
                  introspect their own consensus state
            description: >-
              MsgConnectionOpenTry defines a msg sent by a Relayer to try to
              open a

              connection on Chain B.
      tags:
        - Msg
  /ibc.core.connection.v1.Msg/UpdateConnectionParams:
    post:
      summary: |-
        UpdateConnectionParams defines a rpc handler method for
        MsgUpdateParams.
      operationId: IbcCoreConnectionV1Msg_UpdateConnectionParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: MsgUpdateParamsResponse defines the MsgUpdateParams response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgUpdateParams defines the sdk.Msg type to update the connection
            parameters.
          in: body
          required: true
          schema:
            type: object
            properties:
              signer:
                type: string
                title: signer address
              params:
                description: |-
                  params defines the connection parameters to update.

                  NOTE: All parameters must be supplied.
                type: object
                properties:
                  max_expected_time_per_block:
                    type: string
                    format: uint64
                    description: >-
                      maximum expected time per block (in nanoseconds), used to
                      enforce block delay. This parameter should reflect the

                      largest amount of time that the chain might reasonably
                      take to produce the next block under normal operating

                      conditions. A safe choice is 3-5x the expected time per
                      block.
            description: >-
              MsgUpdateParams defines the sdk.Msg type to update the connection
              parameters.
      tags:
        - Msg
  /interchain_security/ccv/consumer/next-fee-distribution:
    get:
      summary: >-
        ConsumerGenesis queries the genesis state needed to start a consumer
        chain

        whose proposal has been accepted
      operationId: InterchainSecurityCcvConsumerV1Query_QueryNextFeeDistribution
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  currentHeight:
                    type: string
                    format: int64
                    title: current block height at the time of querying
                  lastHeight:
                    type: string
                    format: int64
                    title: block height at which last distribution took place
                  nextHeight:
                    type: string
                    format: int64
                    title: block height at which next distribution will take place
                  distribution_fraction:
                    type: string
                    title: ratio between consumer and provider fee distribution
                  total:
                    type: string
                    title: total accruead fees at the time of querying
                  toProvider:
                    type: string
                    title: amount distibuted to provider chain
                  toConsumer:
                    type: string
                    title: amount distributed (kept) by consumer chain
                title: >-
                  NextFeeDistributionEstimate holds information about next fee
                  distribution
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /interchain_security/ccv/consumer/params:
    get:
      summary: QueryParams queries the ccv/consumer module parameters.
      operationId: InterchainSecurityCcvConsumerV1Query_QueryParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params holds all the parameters of this module.
                type: object
                properties:
                  enabled:
                    type: boolean
                    title: >-
                      TODO: Remove enabled flag and find a better way to setup
                      integration tests

                      See:
                      https://github.com/cosmos/interchain-security/issues/339
                  blocks_per_distribution_transmission:
                    type: string
                    format: int64
                    description: >-
                      /////////////////////

                      Distribution Params

                      Number of blocks between ibc-token-transfers from the
                      consumer chain to

                      the provider chain. Note that at this transmission event a
                      fraction of

                      the accumulated tokens are divided and sent consumer
                      redistribution

                      address.
                  distribution_transmission_channel:
                    type: string
                    description: >-
                      Channel, and provider-chain receiving address to send
                      distribution token

                      transfers over. These parameters is auto-set during the
                      consumer <->

                      provider handshake procedure.
                  provider_fee_pool_addr_str:
                    type: string
                  ccv_timeout_period:
                    type: string
                    title: >-
                      Sent CCV related IBC packets will timeout after this
                      duration
                  transfer_timeout_period:
                    type: string
                    title: >-
                      Sent transfer related IBC packets will timeout after this
                      duration
                  consumer_redistribution_fraction:
                    type: string
                    description: >-
                      The fraction of tokens allocated to the consumer
                      redistribution address

                      during distribution events. The fraction is a string
                      representing a

                      decimal number. For example "0.75" would represent 75%.
                  historical_entries:
                    type: string
                    format: int64
                    description: >-
                      The number of historical info entries to persist in store.

                      This param is a part of the cosmos sdk staking module. In
                      the case of

                      a ccv enabled consumer chain, the ccv module acts as the
                      staking module.
                  unbonding_period:
                    type: string
                    description: >-
                      Unbonding period for the consumer,

                      which should be smaller than that of the provider in
                      general.
                  soft_opt_out_threshold:
                    type: string
                    title: >-
                      The threshold for the percentage of validators at the
                      bottom of the set who

                      can opt out of running the consumer chain without being
                      punished. For

                      example, a value of 0.05 means that the validators in the
                      bottom 5% of the

                      set can opt out
                  reward_denoms:
                    type: array
                    items:
                      type: string
                    description: >-
                      Reward denoms. These are the denominations which are
                      allowed to be sent to

                      the provider as rewards.
                  provider_reward_denoms:
                    type: array
                    items:
                      type: string
                    title: >-
                      Provider-originated reward denoms. These are denoms coming
                      from the

                      provider which are allowed to be used as rewards. e.g.
                      "uatom"
            description: >-
              QueryParamsResponse is response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /interchain_security/ccv/consumer/provider-info:
    get:
      operationId: InterchainSecurityCcvConsumerV1Query_QueryProviderInfo
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              consumer:
                type: object
                properties:
                  chainID:
                    type: string
                  clientID:
                    type: string
                  connectionID:
                    type: string
                  channelID:
                    type: string
              provider:
                type: object
                properties:
                  chainID:
                    type: string
                  clientID:
                    type: string
                  connectionID:
                    type: string
                  channelID:
                    type: string
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /interchain_security.ccv.provider.v1.Msg/AssignConsumerKey:
    post:
      operationId: InterchainSecurityCcvProviderV1Msg_AssignConsumerKey
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              chain_id:
                type: string
                title: >-
                  The chain id of the consumer chain to assign a consensus
                  public key to
              provider_addr:
                type: string
                title: The validator address on the provider
              consumer_key:
                type: string
                title: >-
                  The consensus public key to use on the consumer.

                  in json string format corresponding to proto-any, ex:

                  `{"@type":"/cosmos.crypto.ed25519.PubKey","key":"Ui5Gf1+mtWUdH8u3xlmzdKID+F3PK0sfXZ73GZ6q6is="}`
              signer:
                type: string
                title: signer address
      tags:
        - Msg
  /interchain_security.ccv.provider.v1.Msg/ChangeRewardDenoms:
    post:
      operationId: InterchainSecurityCcvProviderV1Msg_ChangeRewardDenoms
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            title: >-
              MsgChangeRewardDenomsResponse defines response type for
              MsgChangeRewardDenoms messages
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            ChangeRewardDenomsProposal is a governance proposal on the provider
            chain to

            mutate the set of denoms accepted by the provider as rewards.


            Note: this replaces ChangeRewardDenomsProposal which is deprecated
            and will be removed soon
          in: body
          required: true
          schema:
            type: object
            properties:
              denoms_to_add:
                type: array
                items:
                  type: string
                title: the list of consumer reward denoms to add
              denoms_to_remove:
                type: array
                items:
                  type: string
                title: the list of consumer reward denoms to remove
              authority:
                type: string
                title: signer address
            description: >-
              ChangeRewardDenomsProposal is a governance proposal on the
              provider chain to

              mutate the set of denoms accepted by the provider as rewards.


              Note: this replaces ChangeRewardDenomsProposal which is deprecated
              and will be removed soon
      tags:
        - Msg
  /interchain_security.ccv.provider.v1.Msg/ConsumerAddition:
    post:
      operationId: InterchainSecurityCcvProviderV1Msg_ConsumerAddition
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            title: >-
              MsgConsumerAdditionResponse defines response type for
              MsgConsumerAddition messages
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgConsumerAddition defines the message used to spawn a new consumer
            chain using a v1 governance proposal.

            If it passes, then all validators on the provider chain are expected
            to validate

            the consumer chain at spawn time or get slashed.

            It is recommended that spawn time occurs after the proposal end
            time.


            Note: this replaces ConsumerAdditionProposal which is deprecated and
            will be removed soon
          in: body
          required: true
          schema:
            type: object
            properties:
              chain_id:
                type: string
                description: >-
                  the proposed chain-id of the new consumer chain, must be
                  different from all

                  other consumer chain ids of the executing provider chain.
              initial_height:
                description: >-
                  the proposed initial height of new consumer chain.

                  For a completely new chain, this will be {0,1}. However, it
                  may be

                  different if this is a chain that is converting to a consumer
                  chain.
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                title: >-
                  Height is a monotonically increasing data type

                  that can be compared against another Height for the purposes
                  of updating and

                  freezing clients
              genesis_hash:
                type: string
                format: byte
                description: >-
                  The hash of the consumer chain genesis state without the
                  consumer CCV

                  module genesis params. It is used for off-chain confirmation
                  of

                  genesis.json validity by validators and other parties.
              binary_hash:
                type: string
                format: byte
                description: >-
                  The hash of the consumer chain binary that should be run by
                  validators on

                  chain initialization. It is used for off-chain confirmation of
                  binary

                  validity by validators and other parties.
              spawn_time:
                type: string
                format: date-time
                description: >-
                  spawn time is the time on the provider chain at which the
                  consumer chain

                  genesis is finalized and all validators will be responsible
                  for starting

                  their consumer chain validator node.
              unbonding_period:
                type: string
                description: |-
                  Unbonding period for the consumer,
                  which should be smaller than that of the provider in general.
              ccv_timeout_period:
                type: string
                title: Sent CCV related IBC packets will timeout after this duration
              transfer_timeout_period:
                type: string
                title: >-
                  Sent transfer related IBC packets will timeout after this
                  duration
              consumer_redistribution_fraction:
                type: string
                description: >-
                  The fraction of tokens allocated to the consumer
                  redistribution address

                  during distribution events. The fraction is a string
                  representing a

                  decimal number. For example "0.75" would represent 75%.
              blocks_per_distribution_transmission:
                type: string
                format: int64
                description: >-
                  BlocksPerDistributionTransmission is the number of blocks
                  between

                  ibc-token-transfers from the consumer chain to the provider
                  chain. On

                  sending transmission event, `consumer_redistribution_fraction`
                  of the

                  accumulated tokens are sent to the consumer redistribution
                  address.
              historical_entries:
                type: string
                format: int64
                description: >-
                  The number of historical info entries to persist in store.

                  This param is a part of the cosmos sdk staking module. In the
                  case of

                  a ccv enabled consumer chain, the ccv module acts as the
                  staking module.
              distribution_transmission_channel:
                type: string
                title: >-
                  The ID of a token transfer channel used for the Reward
                  Distribution

                  sub-protocol. If DistributionTransmissionChannel == "", a new
                  transfer

                  channel is created on top of the same connection as the CCV
                  channel.

                  Note that transfer_channel_id is the ID of the channel end on
                  the consumer

                  chain. it is most relevant for chains performing a sovereign
                  to consumer

                  changeover in order to maintan the existing ibc transfer
                  channel
              authority:
                type: string
                title: signer address
            description: >-
              MsgConsumerAddition defines the message used to spawn a new
              consumer chain using a v1 governance proposal.

              If it passes, then all validators on the provider chain are
              expected to validate

              the consumer chain at spawn time or get slashed.

              It is recommended that spawn time occurs after the proposal end
              time.


              Note: this replaces ConsumerAdditionProposal which is deprecated
              and will be removed soon
      tags:
        - Msg
  /interchain_security.ccv.provider.v1.Msg/ConsumerRemoval:
    post:
      operationId: InterchainSecurityCcvProviderV1Msg_ConsumerRemoval
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            title: >-
              MsgConsumerRemovalResponse defines response type for
              MsgConsumerRemoval messages
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgConsumerRemoval message contains a governance proposal on the
            provider chain to

            remove (and stop) a consumer chain. If it passes, all the consumer
            chain's

            state is removed from the provider chain. The outstanding unbonding
            operation

            funds are released.


            Note: this replaces ConsumerRemovalProposal which is deprecated and
            will be removed soon
          in: body
          required: true
          schema:
            type: object
            properties:
              chain_id:
                type: string
                title: the chain-id of the consumer chain to be stopped
              stop_time:
                type: string
                format: date-time
                title: >-
                  the time on the provider chain at which all validators are
                  responsible to

                  stop their consumer chain validator node
              authority:
                type: string
                title: signer address
            description: >-
              MsgConsumerRemoval message contains a governance proposal on the
              provider chain to

              remove (and stop) a consumer chain. If it passes, all the consumer
              chain's

              state is removed from the provider chain. The outstanding
              unbonding operation

              funds are released.


              Note: this replaces ConsumerRemovalProposal which is deprecated
              and will be removed soon
      tags:
        - Msg
  /interchain_security.ccv.provider.v1.Msg/UpdateParams:
    post:
      operationId: InterchainSecurityCcvProviderV1Msg_UpdateParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              authority:
                type: string
                description: signer is the address of the governance account.
              params:
                description: params defines the x/provider parameters to update.
                type: object
                properties:
                  template_client:
                    type: object
                    properties:
                      chain_id:
                        type: string
                      trust_level:
                        type: object
                        properties:
                          numerator:
                            type: string
                            format: uint64
                          denominator:
                            type: string
                            format: uint64
                        description: >-
                          Fraction defines the protobuf message type for
                          tmmath.Fraction that only

                          supports positive values.
                      trusting_period:
                        type: string
                        title: >-
                          duration of the period since the LastestTimestamp
                          during which the

                          submitted headers are valid for upgrade
                      unbonding_period:
                        type: string
                        title: duration of the staking unbonding period
                      max_clock_drift:
                        type: string
                        description: >-
                          defines how much new (untrusted) header's Time can
                          drift into the future.
                      frozen_height:
                        title: >-
                          Block height when the client was frozen due to a
                          misbehaviour
                        type: object
                        properties:
                          revision_number:
                            type: string
                            format: uint64
                            title: the revision that the client is currently on
                          revision_height:
                            type: string
                            format: uint64
                            title: the height within the given revision
                        description: >-
                          Normally the RevisionHeight is incremented at each
                          height while keeping

                          RevisionNumber the same. However some consensus
                          algorithms may choose to

                          reset the height in certain conditions e.g. hard
                          forks, state-machine

                          breaking changes In these cases, the RevisionNumber is
                          incremented so that

                          height continues to be monitonically increasing even
                          as the RevisionHeight

                          gets reset
                      latest_height:
                        title: Latest height the client was updated to
                        type: object
                        properties:
                          revision_number:
                            type: string
                            format: uint64
                            title: the revision that the client is currently on
                          revision_height:
                            type: string
                            format: uint64
                            title: the height within the given revision
                        description: >-
                          Normally the RevisionHeight is incremented at each
                          height while keeping

                          RevisionNumber the same. However some consensus
                          algorithms may choose to

                          reset the height in certain conditions e.g. hard
                          forks, state-machine

                          breaking changes In these cases, the RevisionNumber is
                          incremented so that

                          height continues to be monitonically increasing even
                          as the RevisionHeight

                          gets reset
                      proof_specs:
                        type: array
                        items:
                          type: object
                          properties:
                            leaf_spec:
                              title: >-
                                any field in the ExistenceProof must be the same
                                as in this spec.

                                except Prefix, which is just the first bytes of
                                prefix (spec can be longer)
                              type: object
                              properties:
                                hash:
                                  type: string
                                  enum:
                                    - NO_HASH
                                    - SHA256
                                    - SHA512
                                    - KECCAK
                                    - RIPEMD160
                                    - BITCOIN
                                    - SHA512_256
                                  default: NO_HASH
                                  title: >-
                                    - NO_HASH: NO_HASH is the default if no data
                                    passed. Note this is an illegal argument
                                    some places.
                                     - BITCOIN: ripemd160(sha256(x))
                                prehash_key:
                                  type: string
                                  enum:
                                    - NO_HASH
                                    - SHA256
                                    - SHA512
                                    - KECCAK
                                    - RIPEMD160
                                    - BITCOIN
                                    - SHA512_256
                                  default: NO_HASH
                                  title: >-
                                    - NO_HASH: NO_HASH is the default if no data
                                    passed. Note this is an illegal argument
                                    some places.
                                     - BITCOIN: ripemd160(sha256(x))
                                prehash_value:
                                  type: string
                                  enum:
                                    - NO_HASH
                                    - SHA256
                                    - SHA512
                                    - KECCAK
                                    - RIPEMD160
                                    - BITCOIN
                                    - SHA512_256
                                  default: NO_HASH
                                  title: >-
                                    - NO_HASH: NO_HASH is the default if no data
                                    passed. Note this is an illegal argument
                                    some places.
                                     - BITCOIN: ripemd160(sha256(x))
                                length:
                                  type: string
                                  enum:
                                    - NO_PREFIX
                                    - VAR_PROTO
                                    - VAR_RLP
                                    - FIXED32_BIG
                                    - FIXED32_LITTLE
                                    - FIXED64_BIG
                                    - FIXED64_LITTLE
                                    - REQUIRE_32_BYTES
                                    - REQUIRE_64_BYTES
                                  default: NO_PREFIX
                                  description: >-
                                    - NO_PREFIX: NO_PREFIX don't include any
                                    length info
                                     - VAR_PROTO: VAR_PROTO uses protobuf (and go-amino) varint encoding of the length
                                     - VAR_RLP: VAR_RLP uses rlp int encoding of the length
                                     - FIXED32_BIG: FIXED32_BIG uses big-endian encoding of the length as a 32 bit integer
                                     - FIXED32_LITTLE: FIXED32_LITTLE uses little-endian encoding of the length as a 32 bit integer
                                     - FIXED64_BIG: FIXED64_BIG uses big-endian encoding of the length as a 64 bit integer
                                     - FIXED64_LITTLE: FIXED64_LITTLE uses little-endian encoding of the length as a 64 bit integer
                                     - REQUIRE_32_BYTES: REQUIRE_32_BYTES is like NONE, but will fail if the input is not exactly 32 bytes (sha256 output)
                                     - REQUIRE_64_BYTES: REQUIRE_64_BYTES is like NONE, but will fail if the input is not exactly 64 bytes (sha512 output)
                                  title: >-
                                    *

                                    LengthOp defines how to process the key and
                                    value of the LeafOp

                                    to include length information. After
                                    encoding the length with the given

                                    algorithm, the length will be prepended to
                                    the key and value bytes.

                                    (Each one with it's own encoded length)
                                prefix:
                                  type: string
                                  format: byte
                                  description: >-
                                    prefix is a fixed bytes that may optionally
                                    be included at the beginning to
                                    differentiate

                                    a leaf node from an inner node.
                              description: >-
                                *

                                LeafOp represents the raw key-value data we wish
                                to prove, and

                                must be flexible to represent the internal
                                transformation from

                                the original key-value pairs into the basis
                                hash, for many existing

                                merkle trees.


                                key and value are passed in. So that the
                                signature of this operation is:

                                leafOp(key, value) -> output


                                To process this, first prehash the keys and
                                values if needed (ANY means no hash in this
                                case):

                                hkey = prehashKey(key)

                                hvalue = prehashValue(value)


                                Then combine the bytes, and hash it

                                output = hash(prefix || length(hkey) || hkey ||
                                length(hvalue) || hvalue)
                            inner_spec:
                              type: object
                              properties:
                                child_order:
                                  type: array
                                  items:
                                    type: integer
                                    format: int32
                                  title: >-
                                    Child order is the ordering of the children
                                    node, must count from 0

                                    iavl tree is [0, 1] (left then right)

                                    merk is [0, 2, 1] (left, right, here)
                                child_size:
                                  type: integer
                                  format: int32
                                min_prefix_length:
                                  type: integer
                                  format: int32
                                max_prefix_length:
                                  type: integer
                                  format: int32
                                empty_child:
                                  type: string
                                  format: byte
                                  title: >-
                                    empty child is the prehash image that is
                                    used when one child is nil (eg. 20 bytes of
                                    0)
                                hash:
                                  type: string
                                  enum:
                                    - NO_HASH
                                    - SHA256
                                    - SHA512
                                    - KECCAK
                                    - RIPEMD160
                                    - BITCOIN
                                    - SHA512_256
                                  default: NO_HASH
                                  title: >-
                                    - NO_HASH: NO_HASH is the default if no data
                                    passed. Note this is an illegal argument
                                    some places.
                                     - BITCOIN: ripemd160(sha256(x))
                              description: >-
                                InnerSpec contains all store-specific structure
                                info to determine if two proofs from a

                                given store are neighbors.


                                This enables:


                                isLeftMost(spec: InnerSpec, op: InnerOp)

                                isRightMost(spec: InnerSpec, op: InnerOp)

                                isLeftNeighbor(spec: InnerSpec, left: InnerOp,
                                right: InnerOp)
                            max_depth:
                              type: integer
                              format: int32
                              title: >-
                                max_depth (if > 0) is the maximum number of
                                InnerOps allowed (mainly for fixed-depth tries)
                            min_depth:
                              type: integer
                              format: int32
                              title: >-
                                min_depth (if > 0) is the minimum number of
                                InnerOps allowed (mainly for fixed-depth tries)
                          description: >-
                            *

                            ProofSpec defines what the expected parameters are
                            for a given proof type.

                            This can be stored in the client and used to
                            validate any incoming proofs.


                            verify(ProofSpec, Proof) -> Proof | Error


                            As demonstrated in tests, if we don't fix the
                            algorithm used to calculate the

                            LeafHash for a given tree, there are many possible
                            key-value pairs that can

                            generate a given hash (by interpretting the preimage
                            differently).

                            We need this for proper security, requires client
                            knows a priori what

                            tree format server uses. But not in code, rather a
                            configuration object.
                        title: >-
                          Proof specifications used in verifying counterparty
                          state
                      upgrade_path:
                        type: array
                        items:
                          type: string
                        title: >-
                          Path at which next upgraded client will be committed.

                          Each element corresponds to the key for a single
                          CommitmentProof in the

                          chained proof. NOTE: ClientState must stored under

                          `{upgradePath}/{upgradeHeight}/clientState`
                          ConsensusState must be stored

                          under `{upgradepath}/{upgradeHeight}/consensusState`
                          For SDK chains using

                          the default upgrade module, upgrade_path should be
                          []string{"upgrade",

                          "upgradedIBCState"}`
                      allow_update_after_expiry:
                        type: boolean
                        title: allow_update_after_expiry is deprecated
                      allow_update_after_misbehaviour:
                        type: boolean
                        title: allow_update_after_misbehaviour is deprecated
                    description: >-
                      ClientState from Tendermint tracks the current validator
                      set, latest height,

                      and a possible frozen height.
                  trusting_period_fraction:
                    type: string
                    title: >-
                      TrustingPeriodFraction is used to compute the consumer and
                      provider IBC

                      client's TrustingPeriod from the chain defined
                      UnbondingPeriod
                  ccv_timeout_period:
                    type: string
                    title: Sent IBC packets will timeout after this duration
                  init_timeout_period:
                    type: string
                    title: >-
                      The channel initialization (IBC channel opening handshake)
                      will timeout

                      after this duration
                  vsc_timeout_period:
                    type: string
                    description: >-
                      The VSC packets sent by the provider will timeout after
                      this duration.

                      Note that unlike ccv_timeout_period which is an IBC param,

                      the vsc_timeout_period is a provider-side param that
                      enables the provider

                      to timeout VSC packets even when a consumer chain is not
                      live.
                  slash_meter_replenish_period:
                    type: string
                    title: The period for which the slash meter is replenished
                  slash_meter_replenish_fraction:
                    type: string
                    description: >-
                      The fraction of total voting power that is replenished to
                      the slash meter

                      every replenish period. This param also serves as a
                      maximum fraction of

                      total voting power that the slash meter can hold.
                  max_throttled_packets:
                    type: string
                    format: int64
                    description: >-
                      The maximum amount of throttled slash or vsc matured
                      packets

                      that can be queued for a single consumer before the
                      provider chain halts.
                  consumer_reward_denom_registration_fee:
                    title: The fee required to be paid to add a reward denom
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                    description: >-
                      Coin defines a token with a denomination and an amount.


                      NOTE: The amount field is an Int which implements the
                      custom method

                      signatures required by gogoproto.
                title: Params defines the parameters for CCV Provider module
            title: MsgUpdateParams is the Msg/UpdateParams request type
      tags:
        - Msg
  /onex.market.Msg/UpdateParams:
    post:
      summary: |-
        UpdateParams defines a (governance) operation for updating the module
        parameters. The authority defaults to the x/gov module account.
      operationId: OnexMarketMsg_UpdateParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgUpdateParamsResponse defines the response structure for
              executing a

              MsgUpdateParams message.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: body
          description: MsgUpdateParams is the Msg/UpdateParams request type.
          in: body
          required: true
          schema:
            type: object
            properties:
              authority:
                type: string
                description: >-
                  authority is the address that controls the module (defaults to
                  x/gov unless overwritten).
              params:
                description: |-
                  params defines the module parameters to update.

                  NOTE: All parameters must be supplied.
                type: object
            description: MsgUpdateParams is the Msg/UpdateParams request type.
      tags:
        - Msg
  /onex/market/params:
    get:
      summary: Parameters queries the parameters of the module.
      operationId: OnexMarketQuery_Params
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params holds all the parameters of this module.
                type: object
            description: >-
              QueryParamsResponse is response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      tags:
        - Query
definitions:
  cosmos.auth.v1beta1.MsgUpdateParams:
    type: object
    properties:
      authority:
        type: string
        description: >-
          authority is the address that controls the module (defaults to x/gov
          unless overwritten).
      params:
        description: |-
          params defines the x/auth parameters to update.

          NOTE: All parameters must be supplied.
        type: object
        properties:
          max_memo_characters:
            type: string
            format: uint64
          tx_sig_limit:
            type: string
            format: uint64
          tx_size_cost_per_byte:
            type: string
            format: uint64
          sig_verify_cost_ed25519:
            type: string
            format: uint64
          sig_verify_cost_secp256k1:
            type: string
            format: uint64
    description: |-
      MsgUpdateParams is the Msg/UpdateParams request type.

      Since: cosmos-sdk 0.47
  cosmos.auth.v1beta1.MsgUpdateParamsResponse:
    type: object
    description: |-
      MsgUpdateParamsResponse defines the response structure for executing a
      MsgUpdateParams message.

      Since: cosmos-sdk 0.47
  cosmos.auth.v1beta1.Params:
    type: object
    properties:
      max_memo_characters:
        type: string
        format: uint64
      tx_sig_limit:
        type: string
        format: uint64
      tx_size_cost_per_byte:
        type: string
        format: uint64
      sig_verify_cost_ed25519:
        type: string
        format: uint64
      sig_verify_cost_secp256k1:
        type: string
        format: uint64
    description: Params defines the parameters for the auth module.
  google.protobuf.Any:
    type: object
    properties:
      '@type':
        type: string
        description: >-
          A URL/resource name that uniquely identifies the type of the
          serialized

          protocol buffer message. This string must contain at least

          one "/" character. The last segment of the URL's path must represent

          the fully qualified name of the type (as in

          `path/google.protobuf.Duration`). The name should be in a canonical
          form

          (e.g., leading "." is not accepted).


          In practice, teams usually precompile into the binary all types that
          they

          expect it to use in the context of Any. However, for URLs which use
          the

          scheme `http`, `https`, or no scheme, one can optionally set up a type

          server that maps type URLs to message definitions as follows:


          * If no scheme is provided, `https` is assumed.

          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official

          protobuf release, and it is not used for type URLs beginning with

          type.googleapis.com. As of May 2023, there are no widely used type
          server

          implementations and no plans to implement one.


          Schemes other than `http`, `https` (or the empty scheme) might be

          used with implementation specific semantics.
    additionalProperties: {}
    description: >-
      `Any` contains an arbitrary serialized protocol buffer message along with
      a

      URL that describes the type of the serialized message.


      Protobuf library provides support to pack/unpack Any values in the form

      of utility functions or additional generated methods of the Any type.


      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }
          // or ...
          if (any.isSameTypeAs(Foo.getDefaultInstance())) {
            foo = any.unpack(Foo.getDefaultInstance());
          }

       Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

       Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := anypb.New(foo)
           if err != nil {
             ...
           }
           ...
           foo := &pb.Foo{}
           if err := any.UnmarshalTo(foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use

      'type.googleapis.com/full.type.name' as the type URL and the unpack

      methods only use the fully qualified type name after the last '/'

      in the type URL, for example "foo.bar.com/x/y.z" will yield type

      name "y.z".


      JSON

      ====

      The JSON representation of an `Any` value uses the regular

      representation of the deserialized, embedded message, with an

      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON

      representation, that representation will be embedded adding a field

      `value` which holds the custom JSON in addition to the `@type`

      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
  google.rpc.Status:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          properties:
            '@type':
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com. As of May 2023, there are no widely used
                type server

                implementations and no plans to implement one.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
          additionalProperties: {}
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }
                // or ...
                if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                  foo = any.unpack(Foo.getDefaultInstance());
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".


            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
  cosmos.authz.v1beta1.Grant:
    type: object
    properties:
      authorization:
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com. As of May 2023, there are no widely used type
              server

              implementations and no plans to implement one.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      expiration:
        type: string
        format: date-time
        title: >-
          time when the grant will expire and will be pruned. If null, then the
          grant

          doesn't have a time expiration (other conditions  in `authorization`

          may apply to invalidate the grant)
    description: |-
      Grant gives permissions to execute
      the provide method with expiration time.
  cosmos.authz.v1beta1.MsgExec:
    type: object
    properties:
      grantee:
        type: string
      msgs:
        type: array
        items:
          type: object
          properties:
            '@type':
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com. As of May 2023, there are no widely used
                type server

                implementations and no plans to implement one.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
          additionalProperties: {}
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }
                // or ...
                if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                  foo = any.unpack(Foo.getDefaultInstance());
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".


            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        description: >-
          Execute Msg.

          The x/authz will try to find a grant matching (msg.signers[0],
          grantee, MsgTypeURL(msg))

          triple and validate it.
    description: |-
      MsgExec attempts to execute the provided messages using
      authorizations granted to the grantee. Each message should have only
      one signer corresponding to the granter of the authorization.
  cosmos.authz.v1beta1.MsgExecResponse:
    type: object
    properties:
      results:
        type: array
        items:
          type: string
          format: byte
    description: MsgExecResponse defines the Msg/MsgExecResponse response type.
  cosmos.authz.v1beta1.MsgGrant:
    type: object
    properties:
      granter:
        type: string
      grantee:
        type: string
      grant:
        type: object
        properties:
          authorization:
            type: object
            properties:
              '@type':
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com. As of May 2023, there are no widely used
                  type server

                  implementations and no plans to implement one.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
            additionalProperties: {}
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }
                  // or ...
                  if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                    foo = any.unpack(Foo.getDefaultInstance());
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := anypb.New(foo)
                   if err != nil {
                     ...
                   }
                   ...
                   foo := &pb.Foo{}
                   if err := any.UnmarshalTo(foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".


              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
          expiration:
            type: string
            format: date-time
            title: >-
              time when the grant will expire and will be pruned. If null, then
              the grant

              doesn't have a time expiration (other conditions  in
              `authorization`

              may apply to invalidate the grant)
        description: |-
          Grant gives permissions to execute
          the provide method with expiration time.
    description: >-
      MsgGrant is a request type for Grant method. It declares authorization to
      the grantee

      on behalf of the granter with the provided expiration time.
  cosmos.authz.v1beta1.MsgGrantResponse:
    type: object
    description: MsgGrantResponse defines the Msg/MsgGrant response type.
  cosmos.authz.v1beta1.MsgRevoke:
    type: object
    properties:
      granter:
        type: string
      grantee:
        type: string
      msg_type_url:
        type: string
    description: |-
      MsgRevoke revokes any authorization with the provided sdk.Msg type on the
      granter's account with that has been granted to the grantee.
  cosmos.authz.v1beta1.MsgRevokeResponse:
    type: object
    description: MsgRevokeResponse defines the Msg/MsgRevokeResponse response type.
  cosmos.bank.v1beta1.Input:
    type: object
    properties:
      address:
        type: string
      coins:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
    description: Input models transaction input.
  cosmos.bank.v1beta1.MsgMultiSend:
    type: object
    properties:
      inputs:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
            coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
          description: Input models transaction input.
        description: >-
          Inputs, despite being `repeated`, only allows one sender input. This
          is

          checked in MsgMultiSend's ValidateBasic.
      outputs:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
            coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
          description: Output models transaction outputs.
    description: MsgMultiSend represents an arbitrary multi-in, multi-out send message.
  cosmos.bank.v1beta1.MsgMultiSendResponse:
    type: object
    description: MsgMultiSendResponse defines the Msg/MultiSend response type.
  cosmos.bank.v1beta1.MsgSend:
    type: object
    properties:
      from_address:
        type: string
      to_address:
        type: string
      amount:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
    description: MsgSend represents a message to send coins from one account to another.
  cosmos.bank.v1beta1.MsgSendResponse:
    type: object
    description: MsgSendResponse defines the Msg/Send response type.
  cosmos.bank.v1beta1.MsgSetSendEnabled:
    type: object
    properties:
      authority:
        type: string
        description: authority is the address that controls the module.
      send_enabled:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            enabled:
              type: boolean
          description: >-
            SendEnabled maps coin denom to a send_enabled status (whether a
            denom is

            sendable).
        description: send_enabled is the list of entries to add or update.
      use_default_for:
        type: array
        items:
          type: string
        description: >-
          use_default_for is a list of denoms that should use the
          params.default_send_enabled value.

          Denoms listed here will have their SendEnabled entries deleted.

          If a denom is included that doesn't have a SendEnabled entry,

          it will be ignored.
    description: |-
      MsgSetSendEnabled is the Msg/SetSendEnabled request type.

      Only entries to add/update/delete need to be included.
      Existing SendEnabled entries that are not included in this
      message are left unchanged.

      Since: cosmos-sdk 0.47
  cosmos.bank.v1beta1.MsgSetSendEnabledResponse:
    type: object
    description: |-
      MsgSetSendEnabledResponse defines the Msg/SetSendEnabled response type.

      Since: cosmos-sdk 0.47
  cosmos.bank.v1beta1.MsgUpdateParams:
    type: object
    properties:
      authority:
        type: string
        description: >-
          authority is the address that controls the module (defaults to x/gov
          unless overwritten).
      params:
        description: |-
          params defines the x/bank parameters to update.

          NOTE: All parameters must be supplied.
        type: object
        properties:
          send_enabled:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                enabled:
                  type: boolean
              description: >-
                SendEnabled maps coin denom to a send_enabled status (whether a
                denom is

                sendable).
            description: >-
              Deprecated: Use of SendEnabled in params is deprecated.

              For genesis, use the newly added send_enabled field in the genesis
              object.

              Storage, lookup, and manipulation of this information is now in
              the keeper.


              As of cosmos-sdk 0.47, this only exists for backwards
              compatibility of genesis files.
          default_send_enabled:
            type: boolean
    description: |-
      MsgUpdateParams is the Msg/UpdateParams request type.

      Since: cosmos-sdk 0.47
  cosmos.bank.v1beta1.MsgUpdateParamsResponse:
    type: object
    description: |-
      MsgUpdateParamsResponse defines the response structure for executing a
      MsgUpdateParams message.

      Since: cosmos-sdk 0.47
  cosmos.bank.v1beta1.Output:
    type: object
    properties:
      address:
        type: string
      coins:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
    description: Output models transaction outputs.
  cosmos.bank.v1beta1.Params:
    type: object
    properties:
      send_enabled:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            enabled:
              type: boolean
          description: >-
            SendEnabled maps coin denom to a send_enabled status (whether a
            denom is

            sendable).
        description: >-
          Deprecated: Use of SendEnabled in params is deprecated.

          For genesis, use the newly added send_enabled field in the genesis
          object.

          Storage, lookup, and manipulation of this information is now in the
          keeper.


          As of cosmos-sdk 0.47, this only exists for backwards compatibility of
          genesis files.
      default_send_enabled:
        type: boolean
    description: Params defines the parameters for the bank module.
  cosmos.bank.v1beta1.SendEnabled:
    type: object
    properties:
      denom:
        type: string
      enabled:
        type: boolean
    description: |-
      SendEnabled maps coin denom to a send_enabled status (whether a denom is
      sendable).
  cosmos.base.v1beta1.Coin:
    type: object
    properties:
      denom:
        type: string
      amount:
        type: string
    description: |-
      Coin defines a token with a denomination and an amount.

      NOTE: The amount field is an Int which implements the custom method
      signatures required by gogoproto.
  cosmos.base.node.v1beta1.ConfigResponse:
    type: object
    properties:
      minimum_gas_price:
        type: string
      pruning_keep_recent:
        type: string
      pruning_interval:
        type: string
      halt_height:
        type: string
        format: uint64
    description: ConfigResponse defines the response structure for the Config gRPC query.
  cosmos.base.node.v1beta1.StatusResponse:
    type: object
    properties:
      earliest_store_height:
        type: string
        format: uint64
        title: earliest block height available in the store
      height:
        type: string
        format: uint64
        title: current block height
      timestamp:
        type: string
        format: date-time
        title: block height timestamp
      app_hash:
        type: string
        format: byte
        title: app hash of the current block
      validator_hash:
        type: string
        format: byte
        title: validator hash provided by the consensus header
    description: StateResponse defines the response structure for the status of a node.
  cosmos.consensus.v1.MsgUpdateParams:
    type: object
    properties:
      authority:
        type: string
        description: >-
          authority is the address that controls the module (defaults to x/gov
          unless overwritten).
      block:
        description: |-
          params defines the x/consensus parameters to update.
          VersionsParams is not included in this Msg because it is tracked
          separarately in x/upgrade.

          NOTE: All parameters must be supplied.
        type: object
        properties:
          max_bytes:
            type: string
            format: int64
            title: |-
              Max block size, in bytes.
              Note: must be greater than 0
          max_gas:
            type: string
            format: int64
            title: |-
              Max gas per block.
              Note: must be greater or equal to -1
      evidence:
        type: object
        properties:
          max_age_num_blocks:
            type: string
            format: int64
            description: >-
              Max age of evidence, in blocks.


              The basic formula for calculating this is: MaxAgeDuration /
              {average block

              time}.
          max_age_duration:
            type: string
            description: >-
              Max age of evidence, in time.


              It should correspond with an app's "unbonding period" or other
              similar

              mechanism for handling [Nothing-At-Stake

              attacks](https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed).
          max_bytes:
            type: string
            format: int64
            title: >-
              This sets the maximum size of total evidence in bytes that can be
              committed in a single block.

              and should fall comfortably under the max block bytes.

              Default is 1048576 or 1MB
        description: EvidenceParams determine how we handle evidence of malfeasance.
      validator:
        type: object
        properties:
          pub_key_types:
            type: array
            items:
              type: string
        description: |-
          ValidatorParams restrict the public key types validators can use.
          NOTE: uses ABCI pubkey naming, not Amino names.
      abci:
        title: 'Since: cosmos-sdk 0.50'
        type: object
        properties:
          vote_extensions_enable_height:
            type: string
            format: int64
            description: >-
              vote_extensions_enable_height configures the first height during
              which

              vote extensions will be enabled. During this specified height, and
              for all

              subsequent heights, precommit messages that do not contain valid
              extension data

              will be considered invalid. Prior to this height, vote extensions
              will not

              be used or accepted by validators on the network.


              Once enabled, vote extensions will be created by the application
              in ExtendVote,

              passed to the application for validation in VerifyVoteExtension
              and given

              to the application to use when proposing a block during
              PrepareProposal.
        description: >-
          ABCIParams configure functionality specific to the Application
          Blockchain Interface.
    description: MsgUpdateParams is the Msg/UpdateParams request type.
  cosmos.consensus.v1.MsgUpdateParamsResponse:
    type: object
    description: |-
      MsgUpdateParamsResponse defines the response structure for executing a
      MsgUpdateParams message.
  tendermint.types.ABCIParams:
    type: object
    properties:
      vote_extensions_enable_height:
        type: string
        format: int64
        description: >-
          vote_extensions_enable_height configures the first height during which

          vote extensions will be enabled. During this specified height, and for
          all

          subsequent heights, precommit messages that do not contain valid
          extension data

          will be considered invalid. Prior to this height, vote extensions will
          not

          be used or accepted by validators on the network.


          Once enabled, vote extensions will be created by the application in
          ExtendVote,

          passed to the application for validation in VerifyVoteExtension and
          given

          to the application to use when proposing a block during
          PrepareProposal.
    description: >-
      ABCIParams configure functionality specific to the Application Blockchain
      Interface.
  tendermint.types.BlockParams:
    type: object
    properties:
      max_bytes:
        type: string
        format: int64
        title: |-
          Max block size, in bytes.
          Note: must be greater than 0
      max_gas:
        type: string
        format: int64
        title: |-
          Max gas per block.
          Note: must be greater or equal to -1
    description: BlockParams contains limits on the block size.
  tendermint.types.EvidenceParams:
    type: object
    properties:
      max_age_num_blocks:
        type: string
        format: int64
        description: >-
          Max age of evidence, in blocks.


          The basic formula for calculating this is: MaxAgeDuration / {average
          block

          time}.
      max_age_duration:
        type: string
        description: >-
          Max age of evidence, in time.


          It should correspond with an app's "unbonding period" or other similar

          mechanism for handling [Nothing-At-Stake

          attacks](https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed).
      max_bytes:
        type: string
        format: int64
        title: >-
          This sets the maximum size of total evidence in bytes that can be
          committed in a single block.

          and should fall comfortably under the max block bytes.

          Default is 1048576 or 1MB
    description: EvidenceParams determine how we handle evidence of malfeasance.
  tendermint.types.ValidatorParams:
    type: object
    properties:
      pub_key_types:
        type: array
        items:
          type: string
    description: |-
      ValidatorParams restrict the public key types validators can use.
      NOTE: uses ABCI pubkey naming, not Amino names.
  cosmos.crisis.v1beta1.MsgUpdateParams:
    type: object
    properties:
      authority:
        type: string
        description: >-
          authority is the address that controls the module (defaults to x/gov
          unless overwritten).
      constant_fee:
        description: constant_fee defines the x/crisis parameter.
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
    description: |-
      MsgUpdateParams is the Msg/UpdateParams request type.

      Since: cosmos-sdk 0.47
  cosmos.crisis.v1beta1.MsgUpdateParamsResponse:
    type: object
    description: |-
      MsgUpdateParamsResponse defines the response structure for executing a
      MsgUpdateParams message.

      Since: cosmos-sdk 0.47
  cosmos.crisis.v1beta1.MsgVerifyInvariant:
    type: object
    properties:
      sender:
        type: string
        description: >-
          sender is the account address of private key to send coins to fee
          collector account.
      invariant_module_name:
        type: string
        description: name of the invariant module.
      invariant_route:
        type: string
        description: invariant_route is the msg's invariant route.
    description: MsgVerifyInvariant represents a message to verify a particular invariance.
  cosmos.crisis.v1beta1.MsgVerifyInvariantResponse:
    type: object
    description: MsgVerifyInvariantResponse defines the Msg/VerifyInvariant response type.
  cosmos.evidence.v1beta1.MsgSubmitEvidence:
    type: object
    properties:
      submitter:
        type: string
        description: submitter is the signer account address of evidence.
      evidence:
        description: evidence defines the evidence of misbehavior.
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com. As of May 2023, there are no widely used type
              server

              implementations and no plans to implement one.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
    description: |-
      MsgSubmitEvidence represents a message that supports submitting arbitrary
      Evidence of misbehavior such as equivocation or counterfactual signing.
  cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse:
    type: object
    properties:
      hash:
        type: string
        format: byte
        description: hash defines the hash of the evidence.
    description: MsgSubmitEvidenceResponse defines the Msg/SubmitEvidence response type.
  cosmos.feegrant.v1beta1.MsgGrantAllowance:
    type: object
    properties:
      granter:
        type: string
        description: >-
          granter is the address of the user granting an allowance of their
          funds.
      grantee:
        type: string
        description: >-
          grantee is the address of the user being granted an allowance of
          another user's funds.
      allowance:
        description: allowance can be any of basic, periodic, allowed fee allowance.
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com. As of May 2023, there are no widely used type
              server

              implementations and no plans to implement one.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
    description: |-
      MsgGrantAllowance adds permission for Grantee to spend up to Allowance
      of fees from the account of Granter.
  cosmos.feegrant.v1beta1.MsgGrantAllowanceResponse:
    type: object
    description: >-
      MsgGrantAllowanceResponse defines the Msg/GrantAllowanceResponse response
      type.
  cosmos.feegrant.v1beta1.MsgPruneAllowances:
    type: object
    properties:
      pruner:
        type: string
        description: pruner is the address of the user pruning expired allowances.
    description: |-
      MsgPruneAllowances prunes expired fee allowances.

      Since cosmos-sdk 0.50
  cosmos.feegrant.v1beta1.MsgPruneAllowancesResponse:
    type: object
    description: >-
      MsgPruneAllowancesResponse defines the Msg/PruneAllowancesResponse
      response type.


      Since cosmos-sdk 0.50
  cosmos.feegrant.v1beta1.MsgRevokeAllowance:
    type: object
    properties:
      granter:
        type: string
        description: >-
          granter is the address of the user granting an allowance of their
          funds.
      grantee:
        type: string
        description: >-
          grantee is the address of the user being granted an allowance of
          another user's funds.
    description: MsgRevokeAllowance removes any existing Allowance from Granter to Grantee.
  cosmos.feegrant.v1beta1.MsgRevokeAllowanceResponse:
    type: object
    description: >-
      MsgRevokeAllowanceResponse defines the Msg/RevokeAllowanceResponse
      response type.
  cosmos.mint.v1beta1.MsgUpdateParams:
    type: object
    properties:
      authority:
        type: string
        description: >-
          authority is the address that controls the module (defaults to x/gov
          unless overwritten).
      params:
        description: |-
          params defines the x/mint parameters to update.

          NOTE: All parameters must be supplied.
        type: object
        properties:
          mint_denom:
            type: string
            title: type of coin to mint
          inflation_rate_change:
            type: string
            title: maximum annual change in inflation rate
          inflation_max:
            type: string
            title: maximum inflation rate
          inflation_min:
            type: string
            title: minimum inflation rate
          goal_bonded:
            type: string
            title: goal of percent bonded atoms
          blocks_per_year:
            type: string
            format: uint64
            title: expected blocks per year
    description: |-
      MsgUpdateParams is the Msg/UpdateParams request type.

      Since: cosmos-sdk 0.47
  cosmos.mint.v1beta1.MsgUpdateParamsResponse:
    type: object
    description: |-
      MsgUpdateParamsResponse defines the response structure for executing a
      MsgUpdateParams message.

      Since: cosmos-sdk 0.47
  cosmos.mint.v1beta1.Params:
    type: object
    properties:
      mint_denom:
        type: string
        title: type of coin to mint
      inflation_rate_change:
        type: string
        title: maximum annual change in inflation rate
      inflation_max:
        type: string
        title: maximum inflation rate
      inflation_min:
        type: string
        title: minimum inflation rate
      goal_bonded:
        type: string
        title: goal of percent bonded atoms
      blocks_per_year:
        type: string
        format: uint64
        title: expected blocks per year
    description: Params defines the parameters for the x/mint module.
  cosmos.nft.v1beta1.MsgSend:
    type: object
    properties:
      class_id:
        type: string
        title: >-
          class_id defines the unique identifier of the nft classification,
          similar to the contract address of ERC721
      id:
        type: string
        title: id defines the unique identification of nft
      sender:
        type: string
        title: sender is the address of the owner of nft
      receiver:
        type: string
        title: receiver is the receiver address of nft
    description: >-
      MsgSend represents a message to send a nft from one account to another
      account.
  cosmos.nft.v1beta1.MsgSendResponse:
    type: object
    description: MsgSendResponse defines the Msg/Send response type.
  cosmos.params.v1beta1.ParamChange:
    type: object
    properties:
      subspace:
        type: string
      key:
        type: string
      value:
        type: string
    description: |-
      ParamChange defines an individual parameter change, for use in
      ParameterChangeProposal.
  cosmos.params.v1beta1.QueryParamsResponse:
    type: object
    properties:
      param:
        description: param defines the queried parameter.
        type: object
        properties:
          subspace:
            type: string
          key:
            type: string
          value:
            type: string
    description: QueryParamsResponse is response type for the Query/Params RPC method.
  cosmos.params.v1beta1.QuerySubspacesResponse:
    type: object
    properties:
      subspaces:
        type: array
        items:
          type: object
          properties:
            subspace:
              type: string
            keys:
              type: array
              items:
                type: string
          description: >-
            Subspace defines a parameter subspace name and all the keys that
            exist for

            the subspace.


            Since: cosmos-sdk 0.46
    description: |-
      QuerySubspacesResponse defines the response types for querying for all
      registered subspaces and all keys for a subspace.

      Since: cosmos-sdk 0.46
  cosmos.params.v1beta1.Subspace:
    type: object
    properties:
      subspace:
        type: string
      keys:
        type: array
        items:
          type: string
    description: |-
      Subspace defines a parameter subspace name and all the keys that exist for
      the subspace.

      Since: cosmos-sdk 0.46
  cosmos.slashing.v1beta1.MsgUnjail:
    type: object
    properties:
      validator_addr:
        type: string
    title: MsgUnjail defines the Msg/Unjail request type
  cosmos.slashing.v1beta1.MsgUnjailResponse:
    type: object
    title: MsgUnjailResponse defines the Msg/Unjail response type
  cosmos.slashing.v1beta1.MsgUpdateParams:
    type: object
    properties:
      authority:
        type: string
        description: >-
          authority is the address that controls the module (defaults to x/gov
          unless overwritten).
      params:
        description: |-
          params defines the x/slashing parameters to update.

          NOTE: All parameters must be supplied.
        type: object
        properties:
          signed_blocks_window:
            type: string
            format: int64
          min_signed_per_window:
            type: string
            format: byte
          downtime_jail_duration:
            type: string
          slash_fraction_double_sign:
            type: string
            format: byte
          slash_fraction_downtime:
            type: string
            format: byte
    description: |-
      MsgUpdateParams is the Msg/UpdateParams request type.

      Since: cosmos-sdk 0.47
  cosmos.slashing.v1beta1.MsgUpdateParamsResponse:
    type: object
    description: |-
      MsgUpdateParamsResponse defines the response structure for executing a
      MsgUpdateParams message.

      Since: cosmos-sdk 0.47
  cosmos.slashing.v1beta1.Params:
    type: object
    properties:
      signed_blocks_window:
        type: string
        format: int64
      min_signed_per_window:
        type: string
        format: byte
      downtime_jail_duration:
        type: string
      slash_fraction_double_sign:
        type: string
        format: byte
      slash_fraction_downtime:
        type: string
        format: byte
    description: Params represents the parameters used for by the slashing module.
  ibc.applications.fee.v1.Fee:
    type: object
    properties:
      recv_fee:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        title: the packet receive fee
      ack_fee:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        title: the packet acknowledgement fee
      timeout_fee:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        title: the packet timeout fee
    title: Fee defines the ICS29 receive, acknowledgement and timeout fees
  ibc.applications.fee.v1.MsgPayPacketFee:
    type: object
    properties:
      fee:
        title: >-
          fee encapsulates the recv, ack and timeout fees associated with an IBC
          packet
        type: object
        properties:
          recv_fee:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            title: the packet receive fee
          ack_fee:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            title: the packet acknowledgement fee
          timeout_fee:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            title: the packet timeout fee
      source_port_id:
        type: string
        title: the source port unique identifier
      source_channel_id:
        type: string
        title: the source channel unique identifer
      signer:
        type: string
        title: account address to refund fee if necessary
      relayers:
        type: array
        items:
          type: string
        title: optional list of relayers permitted to the receive packet fees
    title: >-
      MsgPayPacketFee defines the request type for the PayPacketFee rpc

      This Msg can be used to pay for a packet at the next sequence send &
      should be combined with the Msg that will be

      paid for
  ibc.applications.fee.v1.MsgPayPacketFeeAsync:
    type: object
    properties:
      packet_id:
        title: >-
          unique packet identifier comprised of the channel ID, port ID and
          sequence
        type: object
        properties:
          port_id:
            type: string
            title: channel port identifier
          channel_id:
            type: string
            title: channel unique identifier
          sequence:
            type: string
            format: uint64
            title: packet sequence
      packet_fee:
        title: the packet fee associated with a particular IBC packet
        type: object
        properties:
          fee:
            title: >-
              fee encapsulates the recv, ack and timeout fees associated with an
              IBC packet
            type: object
            properties:
              recv_fee:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                title: the packet receive fee
              ack_fee:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                title: the packet acknowledgement fee
              timeout_fee:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                title: the packet timeout fee
          refund_address:
            type: string
            title: the refund address for unspent fees
          relayers:
            type: array
            items:
              type: string
            title: optional list of relayers permitted to receive fees
    title: >-
      MsgPayPacketFeeAsync defines the request type for the PayPacketFeeAsync
      rpc

      This Msg can be used to pay for a packet at a specified sequence (instead
      of the next sequence send)
  ibc.applications.fee.v1.MsgPayPacketFeeAsyncResponse:
    type: object
    title: >-
      MsgPayPacketFeeAsyncResponse defines the response type for the
      PayPacketFeeAsync rpc
  ibc.applications.fee.v1.MsgPayPacketFeeResponse:
    type: object
    title: MsgPayPacketFeeResponse defines the response type for the PayPacketFee rpc
  ibc.applications.fee.v1.MsgRegisterCounterpartyPayee:
    type: object
    properties:
      port_id:
        type: string
        title: unique port identifier
      channel_id:
        type: string
        title: unique channel identifier
      relayer:
        type: string
        title: the relayer address
      counterparty_payee:
        type: string
        title: the counterparty payee address
    title: >-
      MsgRegisterCounterpartyPayee defines the request type for the
      RegisterCounterpartyPayee rpc
  ibc.applications.fee.v1.MsgRegisterCounterpartyPayeeResponse:
    type: object
    title: >-
      MsgRegisterCounterpartyPayeeResponse defines the response type for the
      RegisterCounterpartyPayee rpc
  ibc.applications.fee.v1.MsgRegisterPayee:
    type: object
    properties:
      port_id:
        type: string
        title: unique port identifier
      channel_id:
        type: string
        title: unique channel identifier
      relayer:
        type: string
        title: the relayer address
      payee:
        type: string
        title: the payee address
    title: MsgRegisterPayee defines the request type for the RegisterPayee rpc
  ibc.applications.fee.v1.MsgRegisterPayeeResponse:
    type: object
    title: >-
      MsgRegisterPayeeResponse defines the response type for the RegisterPayee
      rpc
  ibc.applications.fee.v1.PacketFee:
    type: object
    properties:
      fee:
        title: >-
          fee encapsulates the recv, ack and timeout fees associated with an IBC
          packet
        type: object
        properties:
          recv_fee:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            title: the packet receive fee
          ack_fee:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            title: the packet acknowledgement fee
          timeout_fee:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            title: the packet timeout fee
      refund_address:
        type: string
        title: the refund address for unspent fees
      relayers:
        type: array
        items:
          type: string
        title: optional list of relayers permitted to receive fees
    title: >-
      PacketFee contains ICS29 relayer fees, refund address and optional list of
      permitted relayers
  ibc.core.channel.v1.PacketId:
    type: object
    properties:
      port_id:
        type: string
        title: channel port identifier
      channel_id:
        type: string
        title: channel unique identifier
      sequence:
        type: string
        format: uint64
        title: packet sequence
    title: |-
      PacketId is an identifer for a unique Packet
      Source chains refer to packets by source port/channel
      Destination chains refer to packets by destination port/channel
  ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccount:
    type: object
    properties:
      owner:
        type: string
      connection_id:
        type: string
      version:
        type: string
      ordering:
        type: string
        enum:
          - ORDER_NONE_UNSPECIFIED
          - ORDER_UNORDERED
          - ORDER_ORDERED
        default: ORDER_NONE_UNSPECIFIED
        description: |-
          - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
           - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
          which they were sent.
           - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
        title: Order defines if a channel is ORDERED or UNORDERED
    title: MsgRegisterInterchainAccount defines the payload for Msg/RegisterAccount
  ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccountResponse:
    type: object
    properties:
      channel_id:
        type: string
      port_id:
        type: string
    title: >-
      MsgRegisterInterchainAccountResponse defines the response for
      Msg/RegisterAccount
  ibc.applications.interchain_accounts.controller.v1.MsgSendTx:
    type: object
    properties:
      owner:
        type: string
      connection_id:
        type: string
      packet_data:
        type: object
        properties:
          type:
            type: string
            enum:
              - TYPE_UNSPECIFIED
              - TYPE_EXECUTE_TX
            default: TYPE_UNSPECIFIED
            description: |-
              - TYPE_UNSPECIFIED: Default zero value enumeration
               - TYPE_EXECUTE_TX: Execute a transaction on an interchain accounts host chain
            title: >-
              Type defines a classification of message issued from a controller
              chain to its associated interchain accounts

              host
          data:
            type: string
            format: byte
          memo:
            type: string
        description: >-
          InterchainAccountPacketData is comprised of a raw transaction, type of
          transaction and optional memo field.
      relative_timeout:
        type: string
        format: uint64
        description: >-
          Relative timeout timestamp provided will be added to the current block
          time during transaction execution.

          The timeout timestamp must be non-zero.
    title: MsgSendTx defines the payload for Msg/SendTx
  ibc.applications.interchain_accounts.controller.v1.MsgSendTxResponse:
    type: object
    properties:
      sequence:
        type: string
        format: uint64
    title: MsgSendTxResponse defines the response for MsgSendTx
  ibc.applications.interchain_accounts.controller.v1.MsgUpdateParams:
    type: object
    properties:
      signer:
        type: string
        title: signer address
      params:
        description: >-
          params defines the 27-interchain-accounts/controller parameters to
          update.


          NOTE: All parameters must be supplied.
        type: object
        properties:
          controller_enabled:
            type: boolean
            description: controller_enabled enables or disables the controller submodule.
    title: MsgUpdateParams defines the payload for Msg/UpdateParams
  ibc.applications.interchain_accounts.controller.v1.MsgUpdateParamsResponse:
    type: object
    title: MsgUpdateParamsResponse defines the response for Msg/UpdateParams
  ibc.applications.interchain_accounts.controller.v1.Params:
    type: object
    properties:
      controller_enabled:
        type: boolean
        description: controller_enabled enables or disables the controller submodule.
    description: |-
      Params defines the set of on-chain interchain accounts parameters.
      The following parameters may be used to disable the controller submodule.
  ibc.applications.interchain_accounts.v1.InterchainAccountPacketData:
    type: object
    properties:
      type:
        type: string
        enum:
          - TYPE_UNSPECIFIED
          - TYPE_EXECUTE_TX
        default: TYPE_UNSPECIFIED
        description: |-
          - TYPE_UNSPECIFIED: Default zero value enumeration
           - TYPE_EXECUTE_TX: Execute a transaction on an interchain accounts host chain
        title: >-
          Type defines a classification of message issued from a controller
          chain to its associated interchain accounts

          host
      data:
        type: string
        format: byte
      memo:
        type: string
    description: >-
      InterchainAccountPacketData is comprised of a raw transaction, type of
      transaction and optional memo field.
  ibc.applications.interchain_accounts.v1.Type:
    type: string
    enum:
      - TYPE_UNSPECIFIED
      - TYPE_EXECUTE_TX
    default: TYPE_UNSPECIFIED
    description: |-
      - TYPE_UNSPECIFIED: Default zero value enumeration
       - TYPE_EXECUTE_TX: Execute a transaction on an interchain accounts host chain
    title: >-
      Type defines a classification of message issued from a controller chain to
      its associated interchain accounts

      host
  ibc.core.channel.v1.Order:
    type: string
    enum:
      - ORDER_NONE_UNSPECIFIED
      - ORDER_UNORDERED
      - ORDER_ORDERED
    default: ORDER_NONE_UNSPECIFIED
    description: |-
      - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
       - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
      which they were sent.
       - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
    title: Order defines if a channel is ORDERED or UNORDERED
  ibc.applications.interchain_accounts.host.v1.MsgUpdateParams:
    type: object
    properties:
      signer:
        type: string
        title: signer address
      params:
        description: |-
          params defines the 27-interchain-accounts/host parameters to update.

          NOTE: All parameters must be supplied.
        type: object
        properties:
          host_enabled:
            type: boolean
            description: host_enabled enables or disables the host submodule.
          allow_messages:
            type: array
            items:
              type: string
            description: >-
              allow_messages defines a list of sdk message typeURLs allowed to
              be executed on a host chain.
    title: MsgUpdateParams defines the payload for Msg/UpdateParams
  ibc.applications.interchain_accounts.host.v1.MsgUpdateParamsResponse:
    type: object
    title: MsgUpdateParamsResponse defines the response for Msg/UpdateParams
  ibc.applications.interchain_accounts.host.v1.Params:
    type: object
    properties:
      host_enabled:
        type: boolean
        description: host_enabled enables or disables the host submodule.
      allow_messages:
        type: array
        items:
          type: string
        description: >-
          allow_messages defines a list of sdk message typeURLs allowed to be
          executed on a host chain.
    description: |-
      Params defines the set of on-chain interchain accounts parameters.
      The following parameters may be used to disable the host submodule.
  ibc.applications.transfer.v1.MsgTransfer:
    type: object
    properties:
      source_port:
        type: string
        title: the port on which the packet will be sent
      source_channel:
        type: string
        title: the channel by which the packet will be sent
      token:
        title: the tokens to be transferred
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
      sender:
        type: string
        title: the sender address
      receiver:
        type: string
        title: the recipient address on the destination chain
      timeout_height:
        description: |-
          Timeout height relative to the current block height.
          The timeout is disabled when set to 0.
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        title: >-
          Height is a monotonically increasing data type

          that can be compared against another Height for the purposes of
          updating and

          freezing clients
      timeout_timestamp:
        type: string
        format: uint64
        description: |-
          Timeout timestamp in absolute nanoseconds since unix epoch.
          The timeout is disabled when set to 0.
      memo:
        type: string
        title: optional memo
    title: >-
      MsgTransfer defines a msg to transfer fungible tokens (i.e Coins) between

      ICS20 enabled chains. See ICS Spec here:

      https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer#data-structures
  ibc.applications.transfer.v1.MsgTransferResponse:
    type: object
    properties:
      sequence:
        type: string
        format: uint64
        title: sequence number of the transfer packet sent
    description: MsgTransferResponse defines the Msg/Transfer response type.
  ibc.applications.transfer.v1.MsgUpdateParams:
    type: object
    properties:
      signer:
        type: string
        title: signer address
      params:
        description: |-
          params defines the transfer parameters to update.

          NOTE: All parameters must be supplied.
        type: object
        properties:
          send_enabled:
            type: boolean
            description: >-
              send_enabled enables or disables all cross-chain token transfers
              from this

              chain.
          receive_enabled:
            type: boolean
            description: >-
              receive_enabled enables or disables all cross-chain token
              transfers to this

              chain.
    description: MsgUpdateParams is the Msg/UpdateParams request type.
  ibc.applications.transfer.v1.MsgUpdateParamsResponse:
    type: object
    description: |-
      MsgUpdateParamsResponse defines the response structure for executing a
      MsgUpdateParams message.
  ibc.applications.transfer.v1.Params:
    type: object
    properties:
      send_enabled:
        type: boolean
        description: >-
          send_enabled enables or disables all cross-chain token transfers from
          this

          chain.
      receive_enabled:
        type: boolean
        description: >-
          receive_enabled enables or disables all cross-chain token transfers to
          this

          chain.
    description: >-
      Params defines the set of IBC transfer parameters.

      NOTE: To prevent a single token from being transferred, set the

      TransfersEnabled parameter to true and then set the bank module's
      SendEnabled

      parameter for the denomination to false.
  ibc.core.client.v1.Height:
    type: object
    properties:
      revision_number:
        type: string
        format: uint64
        title: the revision that the client is currently on
      revision_height:
        type: string
        format: uint64
        title: the height within the given revision
    description: |-
      Normally the RevisionHeight is incremented at each height while keeping
      RevisionNumber the same. However some consensus algorithms may choose to
      reset the height in certain conditions e.g. hard forks, state-machine
      breaking changes In these cases, the RevisionNumber is incremented so that
      height continues to be monitonically increasing even as the RevisionHeight
      gets reset
    title: >-
      Height is a monotonically increasing data type

      that can be compared against another Height for the purposes of updating
      and

      freezing clients
  cosmos.upgrade.v1beta1.Plan:
    type: object
    properties:
      name:
        type: string
        description: >-
          Sets the name for the upgrade. This name will be used by the upgraded

          version of the software to apply any special "on-upgrade" commands
          during

          the first BeginBlock method after the upgrade is applied. It is also
          used

          to detect whether a software version can handle a given upgrade. If no

          upgrade handler with this name has been set in the software, it will
          be

          assumed that the software is out-of-date when the upgrade Time or
          Height is

          reached and the software will exit.
      time:
        type: string
        format: date-time
        description: >-
          Deprecated: Time based upgrades have been deprecated. Time based
          upgrade logic

          has been removed from the SDK.

          If this field is not empty, an error will be thrown.
      height:
        type: string
        format: int64
        description: The height at which the upgrade must be performed.
      info:
        type: string
        title: |-
          Any application specific upgrade info to be included on-chain
          such as a git commit that validators could automatically upgrade to
      upgraded_client_state:
        description: >-
          Deprecated: UpgradedClientState field has been deprecated. IBC upgrade
          logic has been

          moved to the IBC module in the sub module 02-client.

          If this field is not empty, an error will be thrown.
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com. As of May 2023, there are no widely used type
              server

              implementations and no plans to implement one.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
    description: >-
      Plan specifies information about a planned upgrade and when it should
      occur.
  ibc.core.client.v1.MsgCreateClient:
    type: object
    properties:
      client_state:
        title: light client state
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com. As of May 2023, there are no widely used type
              server

              implementations and no plans to implement one.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      consensus_state:
        description: |-
          consensus state associated with the client that corresponds to a given
          height.
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com. As of May 2023, there are no widely used type
              server

              implementations and no plans to implement one.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
      signer:
        type: string
        title: signer address
    title: MsgCreateClient defines a message to create an IBC client
  ibc.core.client.v1.MsgCreateClientResponse:
    type: object
    description: MsgCreateClientResponse defines the Msg/CreateClient response type.
  ibc.core.client.v1.MsgIBCSoftwareUpgrade:
    type: object
    properties:
      plan:
        type: object
        properties:
          name:
            type: string
            description: >-
              Sets the name for the upgrade. This name will be used by the
              upgraded

              version of the software to apply any special "on-upgrade" commands
              during

              the first BeginBlock method after the upgrade is applied. It is
              also used

              to detect whether a software version can handle a given upgrade.
              If no

              upgrade handler with this name has been set in the software, it
              will be

              assumed that the software is out-of-date when the upgrade Time or
              Height is

              reached and the software will exit.
          time:
            type: string
            format: date-time
            description: >-
              Deprecated: Time based upgrades have been deprecated. Time based
              upgrade logic

              has been removed from the SDK.

              If this field is not empty, an error will be thrown.
          height:
            type: string
            format: int64
            description: The height at which the upgrade must be performed.
          info:
            type: string
            title: >-
              Any application specific upgrade info to be included on-chain

              such as a git commit that validators could automatically upgrade
              to
          upgraded_client_state:
            description: >-
              Deprecated: UpgradedClientState field has been deprecated. IBC
              upgrade logic has been

              moved to the IBC module in the sub module 02-client.

              If this field is not empty, an error will be thrown.
            type: object
            properties:
              '@type':
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com. As of May 2023, there are no widely used
                  type server

                  implementations and no plans to implement one.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
            additionalProperties: {}
        description: >-
          Plan specifies information about a planned upgrade and when it should
          occur.
      upgraded_client_state:
        description: >-
          An UpgradedClientState must be provided to perform an IBC breaking
          upgrade.

          This will make the chain commit to the correct upgraded (self) client
          state

          before the upgrade occurs, so that connecting chains can verify that
          the

          new upgraded client is valid by verifying a proof on the previous
          version

          of the chain. This will allow IBC connections to persist smoothly
          across

          planned chain upgrades. Correspondingly, the UpgradedClientState field
          has been

          deprecated in the Cosmos SDK to allow for this logic to exist solely
          in

          the 02-client module.
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com. As of May 2023, there are no widely used type
              server

              implementations and no plans to implement one.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
      signer:
        type: string
        title: signer address
    title: >-
      MsgIBCSoftwareUpgrade defines the message used to schedule an upgrade of
      an IBC client using a v1 governance proposal
  ibc.core.client.v1.MsgIBCSoftwareUpgradeResponse:
    type: object
    description: >-
      MsgIBCSoftwareUpgradeResponse defines the Msg/IBCSoftwareUpgrade response
      type.
  ibc.core.client.v1.MsgRecoverClient:
    type: object
    properties:
      subject_client_id:
        type: string
        title: >-
          the client identifier for the client to be updated if the proposal
          passes
      substitute_client_id:
        type: string
        title: >-
          the substitute client identifier for the client which will replace the
          subject

          client
      signer:
        type: string
        title: signer address
    description: >-
      MsgRecoverClient defines the message used to recover a frozen or expired
      client.
  ibc.core.client.v1.MsgRecoverClientResponse:
    type: object
    description: MsgRecoverClientResponse defines the Msg/RecoverClient response type.
  ibc.core.client.v1.MsgSubmitMisbehaviour:
    type: object
    properties:
      client_id:
        type: string
        title: client unique identifier
      misbehaviour:
        title: misbehaviour used for freezing the light client
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com. As of May 2023, there are no widely used type
              server

              implementations and no plans to implement one.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      signer:
        type: string
        title: signer address
    description: |-
      MsgSubmitMisbehaviour defines an sdk.Msg type that submits Evidence for
      light client misbehaviour.
      This message has been deprecated. Use MsgUpdateClient instead.
  ibc.core.client.v1.MsgSubmitMisbehaviourResponse:
    type: object
    description: |-
      MsgSubmitMisbehaviourResponse defines the Msg/SubmitMisbehaviour response
      type.
  ibc.core.client.v1.MsgUpdateClient:
    type: object
    properties:
      client_id:
        type: string
        title: client unique identifier
      client_message:
        title: client message to update the light client
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com. As of May 2023, there are no widely used type
              server

              implementations and no plans to implement one.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      signer:
        type: string
        title: signer address
    description: |-
      MsgUpdateClient defines an sdk.Msg to update a IBC client state using
      the given client message.
  ibc.core.client.v1.MsgUpdateClientResponse:
    type: object
    description: MsgUpdateClientResponse defines the Msg/UpdateClient response type.
  ibc.core.client.v1.MsgUpdateParams:
    type: object
    properties:
      signer:
        type: string
        title: signer address
      params:
        description: |-
          params defines the client parameters to update.

          NOTE: All parameters must be supplied.
        type: object
        properties:
          allowed_clients:
            type: array
            items:
              type: string
            description: >-
              allowed_clients defines the list of allowed client state types
              which can be created

              and interacted with. If a client type is removed from the allowed
              clients list, usage

              of this client will be disabled until it is added again to the
              list.
    description: MsgUpdateParams defines the sdk.Msg type to update the client parameters.
  ibc.core.client.v1.MsgUpdateParamsResponse:
    type: object
    description: MsgUpdateParamsResponse defines the MsgUpdateParams response type.
  ibc.core.client.v1.MsgUpgradeClient:
    type: object
    properties:
      client_id:
        type: string
        title: client unique identifier
      client_state:
        title: upgraded client state
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com. As of May 2023, there are no widely used type
              server

              implementations and no plans to implement one.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      consensus_state:
        title: >-
          upgraded consensus state, only contains enough information to serve as
          a

          basis of trust in update logic
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com. As of May 2023, there are no widely used type
              server

              implementations and no plans to implement one.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      proof_upgrade_client:
        type: string
        format: byte
        title: proof that old chain committed to new client
      proof_upgrade_consensus_state:
        type: string
        format: byte
        title: proof that old chain committed to new consensus state
      signer:
        type: string
        title: signer address
    title: >-
      MsgUpgradeClient defines an sdk.Msg to upgrade an IBC client to a new
      client

      state
  ibc.core.client.v1.MsgUpgradeClientResponse:
    type: object
    description: MsgUpgradeClientResponse defines the Msg/UpgradeClient response type.
  ibc.core.client.v1.Params:
    type: object
    properties:
      allowed_clients:
        type: array
        items:
          type: string
        description: >-
          allowed_clients defines the list of allowed client state types which
          can be created

          and interacted with. If a client type is removed from the allowed
          clients list, usage

          of this client will be disabled until it is added again to the list.
    description: Params defines the set of IBC light client parameters.
  ibc.core.commitment.v1.MerklePrefix:
    type: object
    properties:
      key_prefix:
        type: string
        format: byte
    title: |-
      MerklePrefix is merkle path prefixed to the key.
      The constructed key from the Path and the key will be append(Path.KeyPath,
      append(Path.KeyPrefix, key...))
  ibc.core.connection.v1.Counterparty:
    type: object
    properties:
      client_id:
        type: string
        description: >-
          identifies the client on the counterparty chain associated with a
          given

          connection.
      connection_id:
        type: string
        description: >-
          identifies the connection end on the counterparty chain associated
          with a

          given connection.
      prefix:
        description: commitment merkle prefix of the counterparty chain.
        type: object
        properties:
          key_prefix:
            type: string
            format: byte
        title: >-
          MerklePrefix is merkle path prefixed to the key.

          The constructed key from the Path and the key will be
          append(Path.KeyPath,

          append(Path.KeyPrefix, key...))
    description: >-
      Counterparty defines the counterparty chain associated with a connection
      end.
  ibc.core.connection.v1.MsgConnectionOpenAck:
    type: object
    properties:
      connection_id:
        type: string
      counterparty_connection_id:
        type: string
      version:
        type: object
        properties:
          identifier:
            type: string
            title: unique version identifier
          features:
            type: array
            items:
              type: string
            title: list of features compatible with the specified identifier
        description: >-
          Version defines the versioning scheme used to negotiate the IBC
          verison in

          the connection handshake.
      client_state:
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com. As of May 2023, there are no widely used type
              server

              implementations and no plans to implement one.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      proof_height:
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        title: >-
          Height is a monotonically increasing data type

          that can be compared against another Height for the purposes of
          updating and

          freezing clients
      proof_try:
        type: string
        format: byte
        title: |-
          proof of the initialization the connection on Chain B: `UNITIALIZED ->
          TRYOPEN`
      proof_client:
        type: string
        format: byte
        title: proof of client state included in message
      proof_consensus:
        type: string
        format: byte
        title: proof of client consensus state
      consensus_height:
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        title: >-
          Height is a monotonically increasing data type

          that can be compared against another Height for the purposes of
          updating and

          freezing clients
      signer:
        type: string
      host_consensus_state_proof:
        type: string
        format: byte
        title: >-
          optional proof data for host state machines that are unable to
          introspect their own consensus state
    description: |-
      MsgConnectionOpenAck defines a msg sent by a Relayer to Chain A to
      acknowledge the change of connection state to TRYOPEN on Chain B.
  ibc.core.connection.v1.MsgConnectionOpenAckResponse:
    type: object
    description: >-
      MsgConnectionOpenAckResponse defines the Msg/ConnectionOpenAck response
      type.
  ibc.core.connection.v1.MsgConnectionOpenConfirm:
    type: object
    properties:
      connection_id:
        type: string
      proof_ack:
        type: string
        format: byte
        title: >-
          proof for the change of the connection state on Chain A: `INIT ->
          OPEN`
      proof_height:
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        title: >-
          Height is a monotonically increasing data type

          that can be compared against another Height for the purposes of
          updating and

          freezing clients
      signer:
        type: string
    description: |-
      MsgConnectionOpenConfirm defines a msg sent by a Relayer to Chain B to
      acknowledge the change of connection state to OPEN on Chain A.
  ibc.core.connection.v1.MsgConnectionOpenConfirmResponse:
    type: object
    description: |-
      MsgConnectionOpenConfirmResponse defines the Msg/ConnectionOpenConfirm
      response type.
  ibc.core.connection.v1.MsgConnectionOpenInit:
    type: object
    properties:
      client_id:
        type: string
      counterparty:
        type: object
        properties:
          client_id:
            type: string
            description: >-
              identifies the client on the counterparty chain associated with a
              given

              connection.
          connection_id:
            type: string
            description: >-
              identifies the connection end on the counterparty chain associated
              with a

              given connection.
          prefix:
            description: commitment merkle prefix of the counterparty chain.
            type: object
            properties:
              key_prefix:
                type: string
                format: byte
            title: >-
              MerklePrefix is merkle path prefixed to the key.

              The constructed key from the Path and the key will be
              append(Path.KeyPath,

              append(Path.KeyPrefix, key...))
        description: >-
          Counterparty defines the counterparty chain associated with a
          connection end.
      version:
        type: object
        properties:
          identifier:
            type: string
            title: unique version identifier
          features:
            type: array
            items:
              type: string
            title: list of features compatible with the specified identifier
        description: >-
          Version defines the versioning scheme used to negotiate the IBC
          verison in

          the connection handshake.
      delay_period:
        type: string
        format: uint64
      signer:
        type: string
    description: |-
      MsgConnectionOpenInit defines the msg sent by an account on Chain A to
      initialize a connection with Chain B.
  ibc.core.connection.v1.MsgConnectionOpenInitResponse:
    type: object
    description: |-
      MsgConnectionOpenInitResponse defines the Msg/ConnectionOpenInit response
      type.
  ibc.core.connection.v1.MsgConnectionOpenTry:
    type: object
    properties:
      client_id:
        type: string
      previous_connection_id:
        type: string
        description: >-
          Deprecated: this field is unused. Crossing hellos are no longer
          supported in core IBC.
      client_state:
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com. As of May 2023, there are no widely used type
              server

              implementations and no plans to implement one.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      counterparty:
        type: object
        properties:
          client_id:
            type: string
            description: >-
              identifies the client on the counterparty chain associated with a
              given

              connection.
          connection_id:
            type: string
            description: >-
              identifies the connection end on the counterparty chain associated
              with a

              given connection.
          prefix:
            description: commitment merkle prefix of the counterparty chain.
            type: object
            properties:
              key_prefix:
                type: string
                format: byte
            title: >-
              MerklePrefix is merkle path prefixed to the key.

              The constructed key from the Path and the key will be
              append(Path.KeyPath,

              append(Path.KeyPrefix, key...))
        description: >-
          Counterparty defines the counterparty chain associated with a
          connection end.
      delay_period:
        type: string
        format: uint64
      counterparty_versions:
        type: array
        items:
          type: object
          properties:
            identifier:
              type: string
              title: unique version identifier
            features:
              type: array
              items:
                type: string
              title: list of features compatible with the specified identifier
          description: >-
            Version defines the versioning scheme used to negotiate the IBC
            verison in

            the connection handshake.
      proof_height:
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        title: >-
          Height is a monotonically increasing data type

          that can be compared against another Height for the purposes of
          updating and

          freezing clients
      proof_init:
        type: string
        format: byte
        title: |-
          proof of the initialization the connection on Chain A: `UNITIALIZED ->
          INIT`
      proof_client:
        type: string
        format: byte
        title: proof of client state included in message
      proof_consensus:
        type: string
        format: byte
        title: proof of client consensus state
      consensus_height:
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        title: >-
          Height is a monotonically increasing data type

          that can be compared against another Height for the purposes of
          updating and

          freezing clients
      signer:
        type: string
      host_consensus_state_proof:
        type: string
        format: byte
        title: >-
          optional proof data for host state machines that are unable to
          introspect their own consensus state
    description: |-
      MsgConnectionOpenTry defines a msg sent by a Relayer to try to open a
      connection on Chain B.
  ibc.core.connection.v1.MsgConnectionOpenTryResponse:
    type: object
    description: >-
      MsgConnectionOpenTryResponse defines the Msg/ConnectionOpenTry response
      type.
  ibc.core.connection.v1.MsgUpdateParams:
    type: object
    properties:
      signer:
        type: string
        title: signer address
      params:
        description: |-
          params defines the connection parameters to update.

          NOTE: All parameters must be supplied.
        type: object
        properties:
          max_expected_time_per_block:
            type: string
            format: uint64
            description: >-
              maximum expected time per block (in nanoseconds), used to enforce
              block delay. This parameter should reflect the

              largest amount of time that the chain might reasonably take to
              produce the next block under normal operating

              conditions. A safe choice is 3-5x the expected time per block.
    description: >-
      MsgUpdateParams defines the sdk.Msg type to update the connection
      parameters.
  ibc.core.connection.v1.MsgUpdateParamsResponse:
    type: object
    description: MsgUpdateParamsResponse defines the MsgUpdateParams response type.
  ibc.core.connection.v1.Params:
    type: object
    properties:
      max_expected_time_per_block:
        type: string
        format: uint64
        description: >-
          maximum expected time per block (in nanoseconds), used to enforce
          block delay. This parameter should reflect the

          largest amount of time that the chain might reasonably take to produce
          the next block under normal operating

          conditions. A safe choice is 3-5x the expected time per block.
    description: Params defines the set of Connection parameters.
  ibc.core.connection.v1.Version:
    type: object
    properties:
      identifier:
        type: string
        title: unique version identifier
      features:
        type: array
        items:
          type: string
        title: list of features compatible with the specified identifier
    description: |-
      Version defines the versioning scheme used to negotiate the IBC verison in
      the connection handshake.
  interchain_security.ccv.consumer.v1.ChainInfo:
    type: object
    properties:
      chainID:
        type: string
      clientID:
        type: string
      connectionID:
        type: string
      channelID:
        type: string
  interchain_security.ccv.consumer.v1.NextFeeDistributionEstimate:
    type: object
    properties:
      currentHeight:
        type: string
        format: int64
        title: current block height at the time of querying
      lastHeight:
        type: string
        format: int64
        title: block height at which last distribution took place
      nextHeight:
        type: string
        format: int64
        title: block height at which next distribution will take place
      distribution_fraction:
        type: string
        title: ratio between consumer and provider fee distribution
      total:
        type: string
        title: total accruead fees at the time of querying
      toProvider:
        type: string
        title: amount distibuted to provider chain
      toConsumer:
        type: string
        title: amount distributed (kept) by consumer chain
    title: NextFeeDistributionEstimate holds information about next fee distribution
  interchain_security.ccv.consumer.v1.QueryNextFeeDistributionEstimateResponse:
    type: object
    properties:
      data:
        type: object
        properties:
          currentHeight:
            type: string
            format: int64
            title: current block height at the time of querying
          lastHeight:
            type: string
            format: int64
            title: block height at which last distribution took place
          nextHeight:
            type: string
            format: int64
            title: block height at which next distribution will take place
          distribution_fraction:
            type: string
            title: ratio between consumer and provider fee distribution
          total:
            type: string
            title: total accruead fees at the time of querying
          toProvider:
            type: string
            title: amount distibuted to provider chain
          toConsumer:
            type: string
            title: amount distributed (kept) by consumer chain
        title: >-
          NextFeeDistributionEstimate holds information about next fee
          distribution
  interchain_security.ccv.consumer.v1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params holds all the parameters of this module.
        type: object
        properties:
          enabled:
            type: boolean
            title: >-
              TODO: Remove enabled flag and find a better way to setup
              integration tests

              See: https://github.com/cosmos/interchain-security/issues/339
          blocks_per_distribution_transmission:
            type: string
            format: int64
            description: >-
              /////////////////////

              Distribution Params

              Number of blocks between ibc-token-transfers from the consumer
              chain to

              the provider chain. Note that at this transmission event a
              fraction of

              the accumulated tokens are divided and sent consumer
              redistribution

              address.
          distribution_transmission_channel:
            type: string
            description: >-
              Channel, and provider-chain receiving address to send distribution
              token

              transfers over. These parameters is auto-set during the consumer
              <->

              provider handshake procedure.
          provider_fee_pool_addr_str:
            type: string
          ccv_timeout_period:
            type: string
            title: Sent CCV related IBC packets will timeout after this duration
          transfer_timeout_period:
            type: string
            title: Sent transfer related IBC packets will timeout after this duration
          consumer_redistribution_fraction:
            type: string
            description: >-
              The fraction of tokens allocated to the consumer redistribution
              address

              during distribution events. The fraction is a string representing
              a

              decimal number. For example "0.75" would represent 75%.
          historical_entries:
            type: string
            format: int64
            description: >-
              The number of historical info entries to persist in store.

              This param is a part of the cosmos sdk staking module. In the case
              of

              a ccv enabled consumer chain, the ccv module acts as the staking
              module.
          unbonding_period:
            type: string
            description: |-
              Unbonding period for the consumer,
              which should be smaller than that of the provider in general.
          soft_opt_out_threshold:
            type: string
            title: >-
              The threshold for the percentage of validators at the bottom of
              the set who

              can opt out of running the consumer chain without being punished.
              For

              example, a value of 0.05 means that the validators in the bottom
              5% of the

              set can opt out
          reward_denoms:
            type: array
            items:
              type: string
            description: >-
              Reward denoms. These are the denominations which are allowed to be
              sent to

              the provider as rewards.
          provider_reward_denoms:
            type: array
            items:
              type: string
            title: >-
              Provider-originated reward denoms. These are denoms coming from
              the

              provider which are allowed to be used as rewards. e.g. "uatom"
    description: QueryParamsResponse is response type for the Query/Params RPC method.
  interchain_security.ccv.consumer.v1.QueryProviderInfoResponse:
    type: object
    properties:
      consumer:
        type: object
        properties:
          chainID:
            type: string
          clientID:
            type: string
          connectionID:
            type: string
          channelID:
            type: string
      provider:
        type: object
        properties:
          chainID:
            type: string
          clientID:
            type: string
          connectionID:
            type: string
          channelID:
            type: string
  interchain_security.ccv.v1.Params:
    type: object
    properties:
      enabled:
        type: boolean
        title: >-
          TODO: Remove enabled flag and find a better way to setup integration
          tests

          See: https://github.com/cosmos/interchain-security/issues/339
      blocks_per_distribution_transmission:
        type: string
        format: int64
        description: >-
          /////////////////////

          Distribution Params

          Number of blocks between ibc-token-transfers from the consumer chain
          to

          the provider chain. Note that at this transmission event a fraction of

          the accumulated tokens are divided and sent consumer redistribution

          address.
      distribution_transmission_channel:
        type: string
        description: >-
          Channel, and provider-chain receiving address to send distribution
          token

          transfers over. These parameters is auto-set during the consumer <->

          provider handshake procedure.
      provider_fee_pool_addr_str:
        type: string
      ccv_timeout_period:
        type: string
        title: Sent CCV related IBC packets will timeout after this duration
      transfer_timeout_period:
        type: string
        title: Sent transfer related IBC packets will timeout after this duration
      consumer_redistribution_fraction:
        type: string
        description: >-
          The fraction of tokens allocated to the consumer redistribution
          address

          during distribution events. The fraction is a string representing a

          decimal number. For example "0.75" would represent 75%.
      historical_entries:
        type: string
        format: int64
        description: >-
          The number of historical info entries to persist in store.

          This param is a part of the cosmos sdk staking module. In the case of

          a ccv enabled consumer chain, the ccv module acts as the staking
          module.
      unbonding_period:
        type: string
        description: |-
          Unbonding period for the consumer,
          which should be smaller than that of the provider in general.
      soft_opt_out_threshold:
        type: string
        title: >-
          The threshold for the percentage of validators at the bottom of the
          set who

          can opt out of running the consumer chain without being punished. For

          example, a value of 0.05 means that the validators in the bottom 5% of
          the

          set can opt out
      reward_denoms:
        type: array
        items:
          type: string
        description: >-
          Reward denoms. These are the denominations which are allowed to be
          sent to

          the provider as rewards.
      provider_reward_denoms:
        type: array
        items:
          type: string
        title: |-
          Provider-originated reward denoms. These are denoms coming from the
          provider which are allowed to be used as rewards. e.g. "uatom"
    description: >-
      Params defines the parameters for CCV consumer module.


      Note this type is referenced in both the consumer and provider CCV
      modules,

      and persisted on the provider, see MakeConsumerGenesis and
      SetConsumerGenesis. 


      TODO: Rename to ConsumerParams. See
      https://github.com/cosmos/interchain-security/issues/1206
  cosmos.ics23.v1.HashOp:
    type: string
    enum:
      - NO_HASH
      - SHA256
      - SHA512
      - KECCAK
      - RIPEMD160
      - BITCOIN
      - SHA512_256
    default: NO_HASH
    title: >-
      - NO_HASH: NO_HASH is the default if no data passed. Note this is an
      illegal argument some places.
       - BITCOIN: ripemd160(sha256(x))
  cosmos.ics23.v1.InnerSpec:
    type: object
    properties:
      child_order:
        type: array
        items:
          type: integer
          format: int32
        title: |-
          Child order is the ordering of the children node, must count from 0
          iavl tree is [0, 1] (left then right)
          merk is [0, 2, 1] (left, right, here)
      child_size:
        type: integer
        format: int32
      min_prefix_length:
        type: integer
        format: int32
      max_prefix_length:
        type: integer
        format: int32
      empty_child:
        type: string
        format: byte
        title: >-
          empty child is the prehash image that is used when one child is nil
          (eg. 20 bytes of 0)
      hash:
        type: string
        enum:
          - NO_HASH
          - SHA256
          - SHA512
          - KECCAK
          - RIPEMD160
          - BITCOIN
          - SHA512_256
        default: NO_HASH
        title: >-
          - NO_HASH: NO_HASH is the default if no data passed. Note this is an
          illegal argument some places.
           - BITCOIN: ripemd160(sha256(x))
    description: >-
      InnerSpec contains all store-specific structure info to determine if two
      proofs from a

      given store are neighbors.


      This enables:


      isLeftMost(spec: InnerSpec, op: InnerOp)

      isRightMost(spec: InnerSpec, op: InnerOp)

      isLeftNeighbor(spec: InnerSpec, left: InnerOp, right: InnerOp)
  cosmos.ics23.v1.LeafOp:
    type: object
    properties:
      hash:
        type: string
        enum:
          - NO_HASH
          - SHA256
          - SHA512
          - KECCAK
          - RIPEMD160
          - BITCOIN
          - SHA512_256
        default: NO_HASH
        title: >-
          - NO_HASH: NO_HASH is the default if no data passed. Note this is an
          illegal argument some places.
           - BITCOIN: ripemd160(sha256(x))
      prehash_key:
        type: string
        enum:
          - NO_HASH
          - SHA256
          - SHA512
          - KECCAK
          - RIPEMD160
          - BITCOIN
          - SHA512_256
        default: NO_HASH
        title: >-
          - NO_HASH: NO_HASH is the default if no data passed. Note this is an
          illegal argument some places.
           - BITCOIN: ripemd160(sha256(x))
      prehash_value:
        type: string
        enum:
          - NO_HASH
          - SHA256
          - SHA512
          - KECCAK
          - RIPEMD160
          - BITCOIN
          - SHA512_256
        default: NO_HASH
        title: >-
          - NO_HASH: NO_HASH is the default if no data passed. Note this is an
          illegal argument some places.
           - BITCOIN: ripemd160(sha256(x))
      length:
        type: string
        enum:
          - NO_PREFIX
          - VAR_PROTO
          - VAR_RLP
          - FIXED32_BIG
          - FIXED32_LITTLE
          - FIXED64_BIG
          - FIXED64_LITTLE
          - REQUIRE_32_BYTES
          - REQUIRE_64_BYTES
        default: NO_PREFIX
        description: |-
          - NO_PREFIX: NO_PREFIX don't include any length info
           - VAR_PROTO: VAR_PROTO uses protobuf (and go-amino) varint encoding of the length
           - VAR_RLP: VAR_RLP uses rlp int encoding of the length
           - FIXED32_BIG: FIXED32_BIG uses big-endian encoding of the length as a 32 bit integer
           - FIXED32_LITTLE: FIXED32_LITTLE uses little-endian encoding of the length as a 32 bit integer
           - FIXED64_BIG: FIXED64_BIG uses big-endian encoding of the length as a 64 bit integer
           - FIXED64_LITTLE: FIXED64_LITTLE uses little-endian encoding of the length as a 64 bit integer
           - REQUIRE_32_BYTES: REQUIRE_32_BYTES is like NONE, but will fail if the input is not exactly 32 bytes (sha256 output)
           - REQUIRE_64_BYTES: REQUIRE_64_BYTES is like NONE, but will fail if the input is not exactly 64 bytes (sha512 output)
        title: >-
          *

          LengthOp defines how to process the key and value of the LeafOp

          to include length information. After encoding the length with the
          given

          algorithm, the length will be prepended to the key and value bytes.

          (Each one with it's own encoded length)
      prefix:
        type: string
        format: byte
        description: >-
          prefix is a fixed bytes that may optionally be included at the
          beginning to differentiate

          a leaf node from an inner node.
    description: >-
      *

      LeafOp represents the raw key-value data we wish to prove, and

      must be flexible to represent the internal transformation from

      the original key-value pairs into the basis hash, for many existing

      merkle trees.


      key and value are passed in. So that the signature of this operation is:

      leafOp(key, value) -> output


      To process this, first prehash the keys and values if needed (ANY means no
      hash in this case):

      hkey = prehashKey(key)

      hvalue = prehashValue(value)


      Then combine the bytes, and hash it

      output = hash(prefix || length(hkey) || hkey || length(hvalue) || hvalue)
  cosmos.ics23.v1.LengthOp:
    type: string
    enum:
      - NO_PREFIX
      - VAR_PROTO
      - VAR_RLP
      - FIXED32_BIG
      - FIXED32_LITTLE
      - FIXED64_BIG
      - FIXED64_LITTLE
      - REQUIRE_32_BYTES
      - REQUIRE_64_BYTES
    default: NO_PREFIX
    description: |-
      - NO_PREFIX: NO_PREFIX don't include any length info
       - VAR_PROTO: VAR_PROTO uses protobuf (and go-amino) varint encoding of the length
       - VAR_RLP: VAR_RLP uses rlp int encoding of the length
       - FIXED32_BIG: FIXED32_BIG uses big-endian encoding of the length as a 32 bit integer
       - FIXED32_LITTLE: FIXED32_LITTLE uses little-endian encoding of the length as a 32 bit integer
       - FIXED64_BIG: FIXED64_BIG uses big-endian encoding of the length as a 64 bit integer
       - FIXED64_LITTLE: FIXED64_LITTLE uses little-endian encoding of the length as a 64 bit integer
       - REQUIRE_32_BYTES: REQUIRE_32_BYTES is like NONE, but will fail if the input is not exactly 32 bytes (sha256 output)
       - REQUIRE_64_BYTES: REQUIRE_64_BYTES is like NONE, but will fail if the input is not exactly 64 bytes (sha512 output)
    title: |-
      *
      LengthOp defines how to process the key and value of the LeafOp
      to include length information. After encoding the length with the given
      algorithm, the length will be prepended to the key and value bytes.
      (Each one with it's own encoded length)
  cosmos.ics23.v1.ProofSpec:
    type: object
    properties:
      leaf_spec:
        title: >-
          any field in the ExistenceProof must be the same as in this spec.

          except Prefix, which is just the first bytes of prefix (spec can be
          longer)
        type: object
        properties:
          hash:
            type: string
            enum:
              - NO_HASH
              - SHA256
              - SHA512
              - KECCAK
              - RIPEMD160
              - BITCOIN
              - SHA512_256
            default: NO_HASH
            title: >-
              - NO_HASH: NO_HASH is the default if no data passed. Note this is
              an illegal argument some places.
               - BITCOIN: ripemd160(sha256(x))
          prehash_key:
            type: string
            enum:
              - NO_HASH
              - SHA256
              - SHA512
              - KECCAK
              - RIPEMD160
              - BITCOIN
              - SHA512_256
            default: NO_HASH
            title: >-
              - NO_HASH: NO_HASH is the default if no data passed. Note this is
              an illegal argument some places.
               - BITCOIN: ripemd160(sha256(x))
          prehash_value:
            type: string
            enum:
              - NO_HASH
              - SHA256
              - SHA512
              - KECCAK
              - RIPEMD160
              - BITCOIN
              - SHA512_256
            default: NO_HASH
            title: >-
              - NO_HASH: NO_HASH is the default if no data passed. Note this is
              an illegal argument some places.
               - BITCOIN: ripemd160(sha256(x))
          length:
            type: string
            enum:
              - NO_PREFIX
              - VAR_PROTO
              - VAR_RLP
              - FIXED32_BIG
              - FIXED32_LITTLE
              - FIXED64_BIG
              - FIXED64_LITTLE
              - REQUIRE_32_BYTES
              - REQUIRE_64_BYTES
            default: NO_PREFIX
            description: |-
              - NO_PREFIX: NO_PREFIX don't include any length info
               - VAR_PROTO: VAR_PROTO uses protobuf (and go-amino) varint encoding of the length
               - VAR_RLP: VAR_RLP uses rlp int encoding of the length
               - FIXED32_BIG: FIXED32_BIG uses big-endian encoding of the length as a 32 bit integer
               - FIXED32_LITTLE: FIXED32_LITTLE uses little-endian encoding of the length as a 32 bit integer
               - FIXED64_BIG: FIXED64_BIG uses big-endian encoding of the length as a 64 bit integer
               - FIXED64_LITTLE: FIXED64_LITTLE uses little-endian encoding of the length as a 64 bit integer
               - REQUIRE_32_BYTES: REQUIRE_32_BYTES is like NONE, but will fail if the input is not exactly 32 bytes (sha256 output)
               - REQUIRE_64_BYTES: REQUIRE_64_BYTES is like NONE, but will fail if the input is not exactly 64 bytes (sha512 output)
            title: >-
              *

              LengthOp defines how to process the key and value of the LeafOp

              to include length information. After encoding the length with the
              given

              algorithm, the length will be prepended to the key and value
              bytes.

              (Each one with it's own encoded length)
          prefix:
            type: string
            format: byte
            description: >-
              prefix is a fixed bytes that may optionally be included at the
              beginning to differentiate

              a leaf node from an inner node.
        description: >-
          *

          LeafOp represents the raw key-value data we wish to prove, and

          must be flexible to represent the internal transformation from

          the original key-value pairs into the basis hash, for many existing

          merkle trees.


          key and value are passed in. So that the signature of this operation
          is:

          leafOp(key, value) -> output


          To process this, first prehash the keys and values if needed (ANY
          means no hash in this case):

          hkey = prehashKey(key)

          hvalue = prehashValue(value)


          Then combine the bytes, and hash it

          output = hash(prefix || length(hkey) || hkey || length(hvalue) ||
          hvalue)
      inner_spec:
        type: object
        properties:
          child_order:
            type: array
            items:
              type: integer
              format: int32
            title: >-
              Child order is the ordering of the children node, must count from
              0

              iavl tree is [0, 1] (left then right)

              merk is [0, 2, 1] (left, right, here)
          child_size:
            type: integer
            format: int32
          min_prefix_length:
            type: integer
            format: int32
          max_prefix_length:
            type: integer
            format: int32
          empty_child:
            type: string
            format: byte
            title: >-
              empty child is the prehash image that is used when one child is
              nil (eg. 20 bytes of 0)
          hash:
            type: string
            enum:
              - NO_HASH
              - SHA256
              - SHA512
              - KECCAK
              - RIPEMD160
              - BITCOIN
              - SHA512_256
            default: NO_HASH
            title: >-
              - NO_HASH: NO_HASH is the default if no data passed. Note this is
              an illegal argument some places.
               - BITCOIN: ripemd160(sha256(x))
        description: >-
          InnerSpec contains all store-specific structure info to determine if
          two proofs from a

          given store are neighbors.


          This enables:


          isLeftMost(spec: InnerSpec, op: InnerOp)

          isRightMost(spec: InnerSpec, op: InnerOp)

          isLeftNeighbor(spec: InnerSpec, left: InnerOp, right: InnerOp)
      max_depth:
        type: integer
        format: int32
        title: >-
          max_depth (if > 0) is the maximum number of InnerOps allowed (mainly
          for fixed-depth tries)
      min_depth:
        type: integer
        format: int32
        title: >-
          min_depth (if > 0) is the minimum number of InnerOps allowed (mainly
          for fixed-depth tries)
    description: >-
      *

      ProofSpec defines what the expected parameters are for a given proof type.

      This can be stored in the client and used to validate any incoming proofs.


      verify(ProofSpec, Proof) -> Proof | Error


      As demonstrated in tests, if we don't fix the algorithm used to calculate
      the

      LeafHash for a given tree, there are many possible key-value pairs that
      can

      generate a given hash (by interpretting the preimage differently).

      We need this for proper security, requires client knows a priori what

      tree format server uses. But not in code, rather a configuration object.
  ibc.lightclients.tendermint.v1.ClientState:
    type: object
    properties:
      chain_id:
        type: string
      trust_level:
        type: object
        properties:
          numerator:
            type: string
            format: uint64
          denominator:
            type: string
            format: uint64
        description: >-
          Fraction defines the protobuf message type for tmmath.Fraction that
          only

          supports positive values.
      trusting_period:
        type: string
        title: |-
          duration of the period since the LastestTimestamp during which the
          submitted headers are valid for upgrade
      unbonding_period:
        type: string
        title: duration of the staking unbonding period
      max_clock_drift:
        type: string
        description: >-
          defines how much new (untrusted) header's Time can drift into the
          future.
      frozen_height:
        title: Block height when the client was frozen due to a misbehaviour
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
      latest_height:
        title: Latest height the client was updated to
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
      proof_specs:
        type: array
        items:
          type: object
          properties:
            leaf_spec:
              title: >-
                any field in the ExistenceProof must be the same as in this
                spec.

                except Prefix, which is just the first bytes of prefix (spec can
                be longer)
              type: object
              properties:
                hash:
                  type: string
                  enum:
                    - NO_HASH
                    - SHA256
                    - SHA512
                    - KECCAK
                    - RIPEMD160
                    - BITCOIN
                    - SHA512_256
                  default: NO_HASH
                  title: >-
                    - NO_HASH: NO_HASH is the default if no data passed. Note
                    this is an illegal argument some places.
                     - BITCOIN: ripemd160(sha256(x))
                prehash_key:
                  type: string
                  enum:
                    - NO_HASH
                    - SHA256
                    - SHA512
                    - KECCAK
                    - RIPEMD160
                    - BITCOIN
                    - SHA512_256
                  default: NO_HASH
                  title: >-
                    - NO_HASH: NO_HASH is the default if no data passed. Note
                    this is an illegal argument some places.
                     - BITCOIN: ripemd160(sha256(x))
                prehash_value:
                  type: string
                  enum:
                    - NO_HASH
                    - SHA256
                    - SHA512
                    - KECCAK
                    - RIPEMD160
                    - BITCOIN
                    - SHA512_256
                  default: NO_HASH
                  title: >-
                    - NO_HASH: NO_HASH is the default if no data passed. Note
                    this is an illegal argument some places.
                     - BITCOIN: ripemd160(sha256(x))
                length:
                  type: string
                  enum:
                    - NO_PREFIX
                    - VAR_PROTO
                    - VAR_RLP
                    - FIXED32_BIG
                    - FIXED32_LITTLE
                    - FIXED64_BIG
                    - FIXED64_LITTLE
                    - REQUIRE_32_BYTES
                    - REQUIRE_64_BYTES
                  default: NO_PREFIX
                  description: |-
                    - NO_PREFIX: NO_PREFIX don't include any length info
                     - VAR_PROTO: VAR_PROTO uses protobuf (and go-amino) varint encoding of the length
                     - VAR_RLP: VAR_RLP uses rlp int encoding of the length
                     - FIXED32_BIG: FIXED32_BIG uses big-endian encoding of the length as a 32 bit integer
                     - FIXED32_LITTLE: FIXED32_LITTLE uses little-endian encoding of the length as a 32 bit integer
                     - FIXED64_BIG: FIXED64_BIG uses big-endian encoding of the length as a 64 bit integer
                     - FIXED64_LITTLE: FIXED64_LITTLE uses little-endian encoding of the length as a 64 bit integer
                     - REQUIRE_32_BYTES: REQUIRE_32_BYTES is like NONE, but will fail if the input is not exactly 32 bytes (sha256 output)
                     - REQUIRE_64_BYTES: REQUIRE_64_BYTES is like NONE, but will fail if the input is not exactly 64 bytes (sha512 output)
                  title: >-
                    *

                    LengthOp defines how to process the key and value of the
                    LeafOp

                    to include length information. After encoding the length
                    with the given

                    algorithm, the length will be prepended to the key and value
                    bytes.

                    (Each one with it's own encoded length)
                prefix:
                  type: string
                  format: byte
                  description: >-
                    prefix is a fixed bytes that may optionally be included at
                    the beginning to differentiate

                    a leaf node from an inner node.
              description: >-
                *

                LeafOp represents the raw key-value data we wish to prove, and

                must be flexible to represent the internal transformation from

                the original key-value pairs into the basis hash, for many
                existing

                merkle trees.


                key and value are passed in. So that the signature of this
                operation is:

                leafOp(key, value) -> output


                To process this, first prehash the keys and values if needed
                (ANY means no hash in this case):

                hkey = prehashKey(key)

                hvalue = prehashValue(value)


                Then combine the bytes, and hash it

                output = hash(prefix || length(hkey) || hkey || length(hvalue)
                || hvalue)
            inner_spec:
              type: object
              properties:
                child_order:
                  type: array
                  items:
                    type: integer
                    format: int32
                  title: >-
                    Child order is the ordering of the children node, must count
                    from 0

                    iavl tree is [0, 1] (left then right)

                    merk is [0, 2, 1] (left, right, here)
                child_size:
                  type: integer
                  format: int32
                min_prefix_length:
                  type: integer
                  format: int32
                max_prefix_length:
                  type: integer
                  format: int32
                empty_child:
                  type: string
                  format: byte
                  title: >-
                    empty child is the prehash image that is used when one child
                    is nil (eg. 20 bytes of 0)
                hash:
                  type: string
                  enum:
                    - NO_HASH
                    - SHA256
                    - SHA512
                    - KECCAK
                    - RIPEMD160
                    - BITCOIN
                    - SHA512_256
                  default: NO_HASH
                  title: >-
                    - NO_HASH: NO_HASH is the default if no data passed. Note
                    this is an illegal argument some places.
                     - BITCOIN: ripemd160(sha256(x))
              description: >-
                InnerSpec contains all store-specific structure info to
                determine if two proofs from a

                given store are neighbors.


                This enables:


                isLeftMost(spec: InnerSpec, op: InnerOp)

                isRightMost(spec: InnerSpec, op: InnerOp)

                isLeftNeighbor(spec: InnerSpec, left: InnerOp, right: InnerOp)
            max_depth:
              type: integer
              format: int32
              title: >-
                max_depth (if > 0) is the maximum number of InnerOps allowed
                (mainly for fixed-depth tries)
            min_depth:
              type: integer
              format: int32
              title: >-
                min_depth (if > 0) is the minimum number of InnerOps allowed
                (mainly for fixed-depth tries)
          description: >-
            *

            ProofSpec defines what the expected parameters are for a given proof
            type.

            This can be stored in the client and used to validate any incoming
            proofs.


            verify(ProofSpec, Proof) -> Proof | Error


            As demonstrated in tests, if we don't fix the algorithm used to
            calculate the

            LeafHash for a given tree, there are many possible key-value pairs
            that can

            generate a given hash (by interpretting the preimage differently).

            We need this for proper security, requires client knows a priori
            what

            tree format server uses. But not in code, rather a configuration
            object.
        title: Proof specifications used in verifying counterparty state
      upgrade_path:
        type: array
        items:
          type: string
        title: >-
          Path at which next upgraded client will be committed.

          Each element corresponds to the key for a single CommitmentProof in
          the

          chained proof. NOTE: ClientState must stored under

          `{upgradePath}/{upgradeHeight}/clientState` ConsensusState must be
          stored

          under `{upgradepath}/{upgradeHeight}/consensusState` For SDK chains
          using

          the default upgrade module, upgrade_path should be []string{"upgrade",

          "upgradedIBCState"}`
      allow_update_after_expiry:
        type: boolean
        title: allow_update_after_expiry is deprecated
      allow_update_after_misbehaviour:
        type: boolean
        title: allow_update_after_misbehaviour is deprecated
    description: >-
      ClientState from Tendermint tracks the current validator set, latest
      height,

      and a possible frozen height.
  ibc.lightclients.tendermint.v1.Fraction:
    type: object
    properties:
      numerator:
        type: string
        format: uint64
      denominator:
        type: string
        format: uint64
    description: |-
      Fraction defines the protobuf message type for tmmath.Fraction that only
      supports positive values.
  interchain_security.ccv.provider.v1.MsgAssignConsumerKey:
    type: object
    properties:
      chain_id:
        type: string
        title: The chain id of the consumer chain to assign a consensus public key to
      provider_addr:
        type: string
        title: The validator address on the provider
      consumer_key:
        type: string
        title: >-
          The consensus public key to use on the consumer.

          in json string format corresponding to proto-any, ex:

          `{"@type":"/cosmos.crypto.ed25519.PubKey","key":"Ui5Gf1+mtWUdH8u3xlmzdKID+F3PK0sfXZ73GZ6q6is="}`
      signer:
        type: string
        title: signer address
  interchain_security.ccv.provider.v1.MsgAssignConsumerKeyResponse:
    type: object
  interchain_security.ccv.provider.v1.MsgChangeRewardDenoms:
    type: object
    properties:
      denoms_to_add:
        type: array
        items:
          type: string
        title: the list of consumer reward denoms to add
      denoms_to_remove:
        type: array
        items:
          type: string
        title: the list of consumer reward denoms to remove
      authority:
        type: string
        title: signer address
    description: >-
      ChangeRewardDenomsProposal is a governance proposal on the provider chain
      to

      mutate the set of denoms accepted by the provider as rewards.


      Note: this replaces ChangeRewardDenomsProposal which is deprecated and
      will be removed soon
  interchain_security.ccv.provider.v1.MsgChangeRewardDenomsResponse:
    type: object
    title: >-
      MsgChangeRewardDenomsResponse defines response type for
      MsgChangeRewardDenoms messages
  interchain_security.ccv.provider.v1.MsgConsumerAddition:
    type: object
    properties:
      chain_id:
        type: string
        description: >-
          the proposed chain-id of the new consumer chain, must be different
          from all

          other consumer chain ids of the executing provider chain.
      initial_height:
        description: |-
          the proposed initial height of new consumer chain.
          For a completely new chain, this will be {0,1}. However, it may be
          different if this is a chain that is converting to a consumer chain.
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        title: >-
          Height is a monotonically increasing data type

          that can be compared against another Height for the purposes of
          updating and

          freezing clients
      genesis_hash:
        type: string
        format: byte
        description: |-
          The hash of the consumer chain genesis state without the consumer CCV
          module genesis params. It is used for off-chain confirmation of
          genesis.json validity by validators and other parties.
      binary_hash:
        type: string
        format: byte
        description: >-
          The hash of the consumer chain binary that should be run by validators
          on

          chain initialization. It is used for off-chain confirmation of binary

          validity by validators and other parties.
      spawn_time:
        type: string
        format: date-time
        description: >-
          spawn time is the time on the provider chain at which the consumer
          chain

          genesis is finalized and all validators will be responsible for
          starting

          their consumer chain validator node.
      unbonding_period:
        type: string
        description: |-
          Unbonding period for the consumer,
          which should be smaller than that of the provider in general.
      ccv_timeout_period:
        type: string
        title: Sent CCV related IBC packets will timeout after this duration
      transfer_timeout_period:
        type: string
        title: Sent transfer related IBC packets will timeout after this duration
      consumer_redistribution_fraction:
        type: string
        description: >-
          The fraction of tokens allocated to the consumer redistribution
          address

          during distribution events. The fraction is a string representing a

          decimal number. For example "0.75" would represent 75%.
      blocks_per_distribution_transmission:
        type: string
        format: int64
        description: |-
          BlocksPerDistributionTransmission is the number of blocks between
          ibc-token-transfers from the consumer chain to the provider chain. On
          sending transmission event, `consumer_redistribution_fraction` of the
          accumulated tokens are sent to the consumer redistribution address.
      historical_entries:
        type: string
        format: int64
        description: >-
          The number of historical info entries to persist in store.

          This param is a part of the cosmos sdk staking module. In the case of

          a ccv enabled consumer chain, the ccv module acts as the staking
          module.
      distribution_transmission_channel:
        type: string
        title: >-
          The ID of a token transfer channel used for the Reward Distribution

          sub-protocol. If DistributionTransmissionChannel == "", a new transfer

          channel is created on top of the same connection as the CCV channel.

          Note that transfer_channel_id is the ID of the channel end on the
          consumer

          chain. it is most relevant for chains performing a sovereign to
          consumer

          changeover in order to maintan the existing ibc transfer channel
      authority:
        type: string
        title: signer address
    description: >-
      MsgConsumerAddition defines the message used to spawn a new consumer chain
      using a v1 governance proposal.

      If it passes, then all validators on the provider chain are expected to
      validate

      the consumer chain at spawn time or get slashed.

      It is recommended that spawn time occurs after the proposal end time.


      Note: this replaces ConsumerAdditionProposal which is deprecated and will
      be removed soon
  interchain_security.ccv.provider.v1.MsgConsumerAdditionResponse:
    type: object
    title: >-
      MsgConsumerAdditionResponse defines response type for MsgConsumerAddition
      messages
  interchain_security.ccv.provider.v1.MsgConsumerRemoval:
    type: object
    properties:
      chain_id:
        type: string
        title: the chain-id of the consumer chain to be stopped
      stop_time:
        type: string
        format: date-time
        title: >-
          the time on the provider chain at which all validators are responsible
          to

          stop their consumer chain validator node
      authority:
        type: string
        title: signer address
    description: >-
      MsgConsumerRemoval message contains a governance proposal on the provider
      chain to

      remove (and stop) a consumer chain. If it passes, all the consumer chain's

      state is removed from the provider chain. The outstanding unbonding
      operation

      funds are released.


      Note: this replaces ConsumerRemovalProposal which is deprecated and will
      be removed soon
  interchain_security.ccv.provider.v1.MsgConsumerRemovalResponse:
    type: object
    title: >-
      MsgConsumerRemovalResponse defines response type for MsgConsumerRemoval
      messages
  interchain_security.ccv.provider.v1.MsgUpdateParams:
    type: object
    properties:
      authority:
        type: string
        description: signer is the address of the governance account.
      params:
        description: params defines the x/provider parameters to update.
        type: object
        properties:
          template_client:
            type: object
            properties:
              chain_id:
                type: string
              trust_level:
                type: object
                properties:
                  numerator:
                    type: string
                    format: uint64
                  denominator:
                    type: string
                    format: uint64
                description: >-
                  Fraction defines the protobuf message type for tmmath.Fraction
                  that only

                  supports positive values.
              trusting_period:
                type: string
                title: >-
                  duration of the period since the LastestTimestamp during which
                  the

                  submitted headers are valid for upgrade
              unbonding_period:
                type: string
                title: duration of the staking unbonding period
              max_clock_drift:
                type: string
                description: >-
                  defines how much new (untrusted) header's Time can drift into
                  the future.
              frozen_height:
                title: Block height when the client was frozen due to a misbehaviour
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
              latest_height:
                title: Latest height the client was updated to
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
              proof_specs:
                type: array
                items:
                  type: object
                  properties:
                    leaf_spec:
                      title: >-
                        any field in the ExistenceProof must be the same as in
                        this spec.

                        except Prefix, which is just the first bytes of prefix
                        (spec can be longer)
                      type: object
                      properties:
                        hash:
                          type: string
                          enum:
                            - NO_HASH
                            - SHA256
                            - SHA512
                            - KECCAK
                            - RIPEMD160
                            - BITCOIN
                            - SHA512_256
                          default: NO_HASH
                          title: >-
                            - NO_HASH: NO_HASH is the default if no data passed.
                            Note this is an illegal argument some places.
                             - BITCOIN: ripemd160(sha256(x))
                        prehash_key:
                          type: string
                          enum:
                            - NO_HASH
                            - SHA256
                            - SHA512
                            - KECCAK
                            - RIPEMD160
                            - BITCOIN
                            - SHA512_256
                          default: NO_HASH
                          title: >-
                            - NO_HASH: NO_HASH is the default if no data passed.
                            Note this is an illegal argument some places.
                             - BITCOIN: ripemd160(sha256(x))
                        prehash_value:
                          type: string
                          enum:
                            - NO_HASH
                            - SHA256
                            - SHA512
                            - KECCAK
                            - RIPEMD160
                            - BITCOIN
                            - SHA512_256
                          default: NO_HASH
                          title: >-
                            - NO_HASH: NO_HASH is the default if no data passed.
                            Note this is an illegal argument some places.
                             - BITCOIN: ripemd160(sha256(x))
                        length:
                          type: string
                          enum:
                            - NO_PREFIX
                            - VAR_PROTO
                            - VAR_RLP
                            - FIXED32_BIG
                            - FIXED32_LITTLE
                            - FIXED64_BIG
                            - FIXED64_LITTLE
                            - REQUIRE_32_BYTES
                            - REQUIRE_64_BYTES
                          default: NO_PREFIX
                          description: |-
                            - NO_PREFIX: NO_PREFIX don't include any length info
                             - VAR_PROTO: VAR_PROTO uses protobuf (and go-amino) varint encoding of the length
                             - VAR_RLP: VAR_RLP uses rlp int encoding of the length
                             - FIXED32_BIG: FIXED32_BIG uses big-endian encoding of the length as a 32 bit integer
                             - FIXED32_LITTLE: FIXED32_LITTLE uses little-endian encoding of the length as a 32 bit integer
                             - FIXED64_BIG: FIXED64_BIG uses big-endian encoding of the length as a 64 bit integer
                             - FIXED64_LITTLE: FIXED64_LITTLE uses little-endian encoding of the length as a 64 bit integer
                             - REQUIRE_32_BYTES: REQUIRE_32_BYTES is like NONE, but will fail if the input is not exactly 32 bytes (sha256 output)
                             - REQUIRE_64_BYTES: REQUIRE_64_BYTES is like NONE, but will fail if the input is not exactly 64 bytes (sha512 output)
                          title: >-
                            *

                            LengthOp defines how to process the key and value of
                            the LeafOp

                            to include length information. After encoding the
                            length with the given

                            algorithm, the length will be prepended to the key
                            and value bytes.

                            (Each one with it's own encoded length)
                        prefix:
                          type: string
                          format: byte
                          description: >-
                            prefix is a fixed bytes that may optionally be
                            included at the beginning to differentiate

                            a leaf node from an inner node.
                      description: >-
                        *

                        LeafOp represents the raw key-value data we wish to
                        prove, and

                        must be flexible to represent the internal
                        transformation from

                        the original key-value pairs into the basis hash, for
                        many existing

                        merkle trees.


                        key and value are passed in. So that the signature of
                        this operation is:

                        leafOp(key, value) -> output


                        To process this, first prehash the keys and values if
                        needed (ANY means no hash in this case):

                        hkey = prehashKey(key)

                        hvalue = prehashValue(value)


                        Then combine the bytes, and hash it

                        output = hash(prefix || length(hkey) || hkey ||
                        length(hvalue) || hvalue)
                    inner_spec:
                      type: object
                      properties:
                        child_order:
                          type: array
                          items:
                            type: integer
                            format: int32
                          title: >-
                            Child order is the ordering of the children node,
                            must count from 0

                            iavl tree is [0, 1] (left then right)

                            merk is [0, 2, 1] (left, right, here)
                        child_size:
                          type: integer
                          format: int32
                        min_prefix_length:
                          type: integer
                          format: int32
                        max_prefix_length:
                          type: integer
                          format: int32
                        empty_child:
                          type: string
                          format: byte
                          title: >-
                            empty child is the prehash image that is used when
                            one child is nil (eg. 20 bytes of 0)
                        hash:
                          type: string
                          enum:
                            - NO_HASH
                            - SHA256
                            - SHA512
                            - KECCAK
                            - RIPEMD160
                            - BITCOIN
                            - SHA512_256
                          default: NO_HASH
                          title: >-
                            - NO_HASH: NO_HASH is the default if no data passed.
                            Note this is an illegal argument some places.
                             - BITCOIN: ripemd160(sha256(x))
                      description: >-
                        InnerSpec contains all store-specific structure info to
                        determine if two proofs from a

                        given store are neighbors.


                        This enables:


                        isLeftMost(spec: InnerSpec, op: InnerOp)

                        isRightMost(spec: InnerSpec, op: InnerOp)

                        isLeftNeighbor(spec: InnerSpec, left: InnerOp, right:
                        InnerOp)
                    max_depth:
                      type: integer
                      format: int32
                      title: >-
                        max_depth (if > 0) is the maximum number of InnerOps
                        allowed (mainly for fixed-depth tries)
                    min_depth:
                      type: integer
                      format: int32
                      title: >-
                        min_depth (if > 0) is the minimum number of InnerOps
                        allowed (mainly for fixed-depth tries)
                  description: >-
                    *

                    ProofSpec defines what the expected parameters are for a
                    given proof type.

                    This can be stored in the client and used to validate any
                    incoming proofs.


                    verify(ProofSpec, Proof) -> Proof | Error


                    As demonstrated in tests, if we don't fix the algorithm used
                    to calculate the

                    LeafHash for a given tree, there are many possible key-value
                    pairs that can

                    generate a given hash (by interpretting the preimage
                    differently).

                    We need this for proper security, requires client knows a
                    priori what

                    tree format server uses. But not in code, rather a
                    configuration object.
                title: Proof specifications used in verifying counterparty state
              upgrade_path:
                type: array
                items:
                  type: string
                title: >-
                  Path at which next upgraded client will be committed.

                  Each element corresponds to the key for a single
                  CommitmentProof in the

                  chained proof. NOTE: ClientState must stored under

                  `{upgradePath}/{upgradeHeight}/clientState` ConsensusState
                  must be stored

                  under `{upgradepath}/{upgradeHeight}/consensusState` For SDK
                  chains using

                  the default upgrade module, upgrade_path should be
                  []string{"upgrade",

                  "upgradedIBCState"}`
              allow_update_after_expiry:
                type: boolean
                title: allow_update_after_expiry is deprecated
              allow_update_after_misbehaviour:
                type: boolean
                title: allow_update_after_misbehaviour is deprecated
            description: >-
              ClientState from Tendermint tracks the current validator set,
              latest height,

              and a possible frozen height.
          trusting_period_fraction:
            type: string
            title: >-
              TrustingPeriodFraction is used to compute the consumer and
              provider IBC

              client's TrustingPeriod from the chain defined UnbondingPeriod
          ccv_timeout_period:
            type: string
            title: Sent IBC packets will timeout after this duration
          init_timeout_period:
            type: string
            title: >-
              The channel initialization (IBC channel opening handshake) will
              timeout

              after this duration
          vsc_timeout_period:
            type: string
            description: >-
              The VSC packets sent by the provider will timeout after this
              duration.

              Note that unlike ccv_timeout_period which is an IBC param,

              the vsc_timeout_period is a provider-side param that enables the
              provider

              to timeout VSC packets even when a consumer chain is not live.
          slash_meter_replenish_period:
            type: string
            title: The period for which the slash meter is replenished
          slash_meter_replenish_fraction:
            type: string
            description: >-
              The fraction of total voting power that is replenished to the
              slash meter

              every replenish period. This param also serves as a maximum
              fraction of

              total voting power that the slash meter can hold.
          max_throttled_packets:
            type: string
            format: int64
            description: >-
              The maximum amount of throttled slash or vsc matured packets

              that can be queued for a single consumer before the provider chain
              halts.
          consumer_reward_denom_registration_fee:
            title: The fee required to be paid to add a reward denom
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
        title: Params defines the parameters for CCV Provider module
    title: MsgUpdateParams is the Msg/UpdateParams request type
  interchain_security.ccv.provider.v1.MsgUpdateParamsResponse:
    type: object
  interchain_security.ccv.provider.v1.Params:
    type: object
    properties:
      template_client:
        type: object
        properties:
          chain_id:
            type: string
          trust_level:
            type: object
            properties:
              numerator:
                type: string
                format: uint64
              denominator:
                type: string
                format: uint64
            description: >-
              Fraction defines the protobuf message type for tmmath.Fraction
              that only

              supports positive values.
          trusting_period:
            type: string
            title: |-
              duration of the period since the LastestTimestamp during which the
              submitted headers are valid for upgrade
          unbonding_period:
            type: string
            title: duration of the staking unbonding period
          max_clock_drift:
            type: string
            description: >-
              defines how much new (untrusted) header's Time can drift into the
              future.
          frozen_height:
            title: Block height when the client was frozen due to a misbehaviour
            type: object
            properties:
              revision_number:
                type: string
                format: uint64
                title: the revision that the client is currently on
              revision_height:
                type: string
                format: uint64
                title: the height within the given revision
            description: >-
              Normally the RevisionHeight is incremented at each height while
              keeping

              RevisionNumber the same. However some consensus algorithms may
              choose to

              reset the height in certain conditions e.g. hard forks,
              state-machine

              breaking changes In these cases, the RevisionNumber is incremented
              so that

              height continues to be monitonically increasing even as the
              RevisionHeight

              gets reset
          latest_height:
            title: Latest height the client was updated to
            type: object
            properties:
              revision_number:
                type: string
                format: uint64
                title: the revision that the client is currently on
              revision_height:
                type: string
                format: uint64
                title: the height within the given revision
            description: >-
              Normally the RevisionHeight is incremented at each height while
              keeping

              RevisionNumber the same. However some consensus algorithms may
              choose to

              reset the height in certain conditions e.g. hard forks,
              state-machine

              breaking changes In these cases, the RevisionNumber is incremented
              so that

              height continues to be monitonically increasing even as the
              RevisionHeight

              gets reset
          proof_specs:
            type: array
            items:
              type: object
              properties:
                leaf_spec:
                  title: >-
                    any field in the ExistenceProof must be the same as in this
                    spec.

                    except Prefix, which is just the first bytes of prefix (spec
                    can be longer)
                  type: object
                  properties:
                    hash:
                      type: string
                      enum:
                        - NO_HASH
                        - SHA256
                        - SHA512
                        - KECCAK
                        - RIPEMD160
                        - BITCOIN
                        - SHA512_256
                      default: NO_HASH
                      title: >-
                        - NO_HASH: NO_HASH is the default if no data passed.
                        Note this is an illegal argument some places.
                         - BITCOIN: ripemd160(sha256(x))
                    prehash_key:
                      type: string
                      enum:
                        - NO_HASH
                        - SHA256
                        - SHA512
                        - KECCAK
                        - RIPEMD160
                        - BITCOIN
                        - SHA512_256
                      default: NO_HASH
                      title: >-
                        - NO_HASH: NO_HASH is the default if no data passed.
                        Note this is an illegal argument some places.
                         - BITCOIN: ripemd160(sha256(x))
                    prehash_value:
                      type: string
                      enum:
                        - NO_HASH
                        - SHA256
                        - SHA512
                        - KECCAK
                        - RIPEMD160
                        - BITCOIN
                        - SHA512_256
                      default: NO_HASH
                      title: >-
                        - NO_HASH: NO_HASH is the default if no data passed.
                        Note this is an illegal argument some places.
                         - BITCOIN: ripemd160(sha256(x))
                    length:
                      type: string
                      enum:
                        - NO_PREFIX
                        - VAR_PROTO
                        - VAR_RLP
                        - FIXED32_BIG
                        - FIXED32_LITTLE
                        - FIXED64_BIG
                        - FIXED64_LITTLE
                        - REQUIRE_32_BYTES
                        - REQUIRE_64_BYTES
                      default: NO_PREFIX
                      description: |-
                        - NO_PREFIX: NO_PREFIX don't include any length info
                         - VAR_PROTO: VAR_PROTO uses protobuf (and go-amino) varint encoding of the length
                         - VAR_RLP: VAR_RLP uses rlp int encoding of the length
                         - FIXED32_BIG: FIXED32_BIG uses big-endian encoding of the length as a 32 bit integer
                         - FIXED32_LITTLE: FIXED32_LITTLE uses little-endian encoding of the length as a 32 bit integer
                         - FIXED64_BIG: FIXED64_BIG uses big-endian encoding of the length as a 64 bit integer
                         - FIXED64_LITTLE: FIXED64_LITTLE uses little-endian encoding of the length as a 64 bit integer
                         - REQUIRE_32_BYTES: REQUIRE_32_BYTES is like NONE, but will fail if the input is not exactly 32 bytes (sha256 output)
                         - REQUIRE_64_BYTES: REQUIRE_64_BYTES is like NONE, but will fail if the input is not exactly 64 bytes (sha512 output)
                      title: >-
                        *

                        LengthOp defines how to process the key and value of the
                        LeafOp

                        to include length information. After encoding the length
                        with the given

                        algorithm, the length will be prepended to the key and
                        value bytes.

                        (Each one with it's own encoded length)
                    prefix:
                      type: string
                      format: byte
                      description: >-
                        prefix is a fixed bytes that may optionally be included
                        at the beginning to differentiate

                        a leaf node from an inner node.
                  description: >-
                    *

                    LeafOp represents the raw key-value data we wish to prove,
                    and

                    must be flexible to represent the internal transformation
                    from

                    the original key-value pairs into the basis hash, for many
                    existing

                    merkle trees.


                    key and value are passed in. So that the signature of this
                    operation is:

                    leafOp(key, value) -> output


                    To process this, first prehash the keys and values if needed
                    (ANY means no hash in this case):

                    hkey = prehashKey(key)

                    hvalue = prehashValue(value)


                    Then combine the bytes, and hash it

                    output = hash(prefix || length(hkey) || hkey ||
                    length(hvalue) || hvalue)
                inner_spec:
                  type: object
                  properties:
                    child_order:
                      type: array
                      items:
                        type: integer
                        format: int32
                      title: >-
                        Child order is the ordering of the children node, must
                        count from 0

                        iavl tree is [0, 1] (left then right)

                        merk is [0, 2, 1] (left, right, here)
                    child_size:
                      type: integer
                      format: int32
                    min_prefix_length:
                      type: integer
                      format: int32
                    max_prefix_length:
                      type: integer
                      format: int32
                    empty_child:
                      type: string
                      format: byte
                      title: >-
                        empty child is the prehash image that is used when one
                        child is nil (eg. 20 bytes of 0)
                    hash:
                      type: string
                      enum:
                        - NO_HASH
                        - SHA256
                        - SHA512
                        - KECCAK
                        - RIPEMD160
                        - BITCOIN
                        - SHA512_256
                      default: NO_HASH
                      title: >-
                        - NO_HASH: NO_HASH is the default if no data passed.
                        Note this is an illegal argument some places.
                         - BITCOIN: ripemd160(sha256(x))
                  description: >-
                    InnerSpec contains all store-specific structure info to
                    determine if two proofs from a

                    given store are neighbors.


                    This enables:


                    isLeftMost(spec: InnerSpec, op: InnerOp)

                    isRightMost(spec: InnerSpec, op: InnerOp)

                    isLeftNeighbor(spec: InnerSpec, left: InnerOp, right:
                    InnerOp)
                max_depth:
                  type: integer
                  format: int32
                  title: >-
                    max_depth (if > 0) is the maximum number of InnerOps allowed
                    (mainly for fixed-depth tries)
                min_depth:
                  type: integer
                  format: int32
                  title: >-
                    min_depth (if > 0) is the minimum number of InnerOps allowed
                    (mainly for fixed-depth tries)
              description: >-
                *

                ProofSpec defines what the expected parameters are for a given
                proof type.

                This can be stored in the client and used to validate any
                incoming proofs.


                verify(ProofSpec, Proof) -> Proof | Error


                As demonstrated in tests, if we don't fix the algorithm used to
                calculate the

                LeafHash for a given tree, there are many possible key-value
                pairs that can

                generate a given hash (by interpretting the preimage
                differently).

                We need this for proper security, requires client knows a priori
                what

                tree format server uses. But not in code, rather a configuration
                object.
            title: Proof specifications used in verifying counterparty state
          upgrade_path:
            type: array
            items:
              type: string
            title: >-
              Path at which next upgraded client will be committed.

              Each element corresponds to the key for a single CommitmentProof
              in the

              chained proof. NOTE: ClientState must stored under

              `{upgradePath}/{upgradeHeight}/clientState` ConsensusState must be
              stored

              under `{upgradepath}/{upgradeHeight}/consensusState` For SDK
              chains using

              the default upgrade module, upgrade_path should be
              []string{"upgrade",

              "upgradedIBCState"}`
          allow_update_after_expiry:
            type: boolean
            title: allow_update_after_expiry is deprecated
          allow_update_after_misbehaviour:
            type: boolean
            title: allow_update_after_misbehaviour is deprecated
        description: >-
          ClientState from Tendermint tracks the current validator set, latest
          height,

          and a possible frozen height.
      trusting_period_fraction:
        type: string
        title: >-
          TrustingPeriodFraction is used to compute the consumer and provider
          IBC

          client's TrustingPeriod from the chain defined UnbondingPeriod
      ccv_timeout_period:
        type: string
        title: Sent IBC packets will timeout after this duration
      init_timeout_period:
        type: string
        title: >-
          The channel initialization (IBC channel opening handshake) will
          timeout

          after this duration
      vsc_timeout_period:
        type: string
        description: >-
          The VSC packets sent by the provider will timeout after this duration.

          Note that unlike ccv_timeout_period which is an IBC param,

          the vsc_timeout_period is a provider-side param that enables the
          provider

          to timeout VSC packets even when a consumer chain is not live.
      slash_meter_replenish_period:
        type: string
        title: The period for which the slash meter is replenished
      slash_meter_replenish_fraction:
        type: string
        description: >-
          The fraction of total voting power that is replenished to the slash
          meter

          every replenish period. This param also serves as a maximum fraction
          of

          total voting power that the slash meter can hold.
      max_throttled_packets:
        type: string
        format: int64
        description: >-
          The maximum amount of throttled slash or vsc matured packets

          that can be queued for a single consumer before the provider chain
          halts.
      consumer_reward_denom_registration_fee:
        title: The fee required to be paid to add a reward denom
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
    title: Params defines the parameters for CCV Provider module
  onex.market.MsgUpdateParams:
    type: object
    properties:
      authority:
        type: string
        description: >-
          authority is the address that controls the module (defaults to x/gov
          unless overwritten).
      params:
        description: |-
          params defines the module parameters to update.

          NOTE: All parameters must be supplied.
        type: object
    description: MsgUpdateParams is the Msg/UpdateParams request type.
  onex.market.MsgUpdateParamsResponse:
    type: object
    description: |-
      MsgUpdateParamsResponse defines the response structure for executing a
      MsgUpdateParams message.
  onex.market.Params:
    type: object
    description: Params defines the parameters for the module.
  onex.market.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params holds all the parameters of this module.
        type: object
    description: QueryParamsResponse is response type for the Query/Params RPC method.
